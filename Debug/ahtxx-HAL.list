
ahtxx-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be8  08004be8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004be8  08004be8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be8  08004be8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08004c04  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08004c04  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be13  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce2  00000000  00000000  0002be4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002db38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f2f5  00000000  00000000  0002f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eafc  00000000  00000000  0003e615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cf9b  00000000  00000000  0004d111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aa0ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc0  00000000  00000000  000aa0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b20 	.word	0x08004b20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004b20 	.word	0x08004b20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fsub>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	46ce      	mov	lr, r9
 8000224:	4647      	mov	r7, r8
 8000226:	0243      	lsls	r3, r0, #9
 8000228:	0a5b      	lsrs	r3, r3, #9
 800022a:	024e      	lsls	r6, r1, #9
 800022c:	00da      	lsls	r2, r3, #3
 800022e:	4694      	mov	ip, r2
 8000230:	0a72      	lsrs	r2, r6, #9
 8000232:	4691      	mov	r9, r2
 8000234:	0045      	lsls	r5, r0, #1
 8000236:	004a      	lsls	r2, r1, #1
 8000238:	b580      	push	{r7, lr}
 800023a:	0e2d      	lsrs	r5, r5, #24
 800023c:	001f      	movs	r7, r3
 800023e:	0fc4      	lsrs	r4, r0, #31
 8000240:	0e12      	lsrs	r2, r2, #24
 8000242:	0fc9      	lsrs	r1, r1, #31
 8000244:	09b6      	lsrs	r6, r6, #6
 8000246:	2aff      	cmp	r2, #255	; 0xff
 8000248:	d05b      	beq.n	8000302 <__aeabi_fsub+0xe2>
 800024a:	2001      	movs	r0, #1
 800024c:	4041      	eors	r1, r0
 800024e:	428c      	cmp	r4, r1
 8000250:	d039      	beq.n	80002c6 <__aeabi_fsub+0xa6>
 8000252:	1aa8      	subs	r0, r5, r2
 8000254:	2800      	cmp	r0, #0
 8000256:	dd5a      	ble.n	800030e <__aeabi_fsub+0xee>
 8000258:	2a00      	cmp	r2, #0
 800025a:	d06a      	beq.n	8000332 <__aeabi_fsub+0x112>
 800025c:	2dff      	cmp	r5, #255	; 0xff
 800025e:	d100      	bne.n	8000262 <__aeabi_fsub+0x42>
 8000260:	e0d9      	b.n	8000416 <__aeabi_fsub+0x1f6>
 8000262:	2280      	movs	r2, #128	; 0x80
 8000264:	04d2      	lsls	r2, r2, #19
 8000266:	4316      	orrs	r6, r2
 8000268:	281b      	cmp	r0, #27
 800026a:	dc00      	bgt.n	800026e <__aeabi_fsub+0x4e>
 800026c:	e0e9      	b.n	8000442 <__aeabi_fsub+0x222>
 800026e:	2001      	movs	r0, #1
 8000270:	4663      	mov	r3, ip
 8000272:	1a18      	subs	r0, r3, r0
 8000274:	0143      	lsls	r3, r0, #5
 8000276:	d400      	bmi.n	800027a <__aeabi_fsub+0x5a>
 8000278:	e0b4      	b.n	80003e4 <__aeabi_fsub+0x1c4>
 800027a:	0180      	lsls	r0, r0, #6
 800027c:	0987      	lsrs	r7, r0, #6
 800027e:	0038      	movs	r0, r7
 8000280:	f000 ff8c 	bl	800119c <__clzsi2>
 8000284:	3805      	subs	r0, #5
 8000286:	4087      	lsls	r7, r0
 8000288:	4285      	cmp	r5, r0
 800028a:	dc00      	bgt.n	800028e <__aeabi_fsub+0x6e>
 800028c:	e0cc      	b.n	8000428 <__aeabi_fsub+0x208>
 800028e:	1a2d      	subs	r5, r5, r0
 8000290:	48b5      	ldr	r0, [pc, #724]	; (8000568 <__aeabi_fsub+0x348>)
 8000292:	4038      	ands	r0, r7
 8000294:	0743      	lsls	r3, r0, #29
 8000296:	d004      	beq.n	80002a2 <__aeabi_fsub+0x82>
 8000298:	230f      	movs	r3, #15
 800029a:	4003      	ands	r3, r0
 800029c:	2b04      	cmp	r3, #4
 800029e:	d000      	beq.n	80002a2 <__aeabi_fsub+0x82>
 80002a0:	3004      	adds	r0, #4
 80002a2:	0143      	lsls	r3, r0, #5
 80002a4:	d400      	bmi.n	80002a8 <__aeabi_fsub+0x88>
 80002a6:	e0a0      	b.n	80003ea <__aeabi_fsub+0x1ca>
 80002a8:	1c6a      	adds	r2, r5, #1
 80002aa:	2dfe      	cmp	r5, #254	; 0xfe
 80002ac:	d100      	bne.n	80002b0 <__aeabi_fsub+0x90>
 80002ae:	e08d      	b.n	80003cc <__aeabi_fsub+0x1ac>
 80002b0:	0180      	lsls	r0, r0, #6
 80002b2:	0a47      	lsrs	r7, r0, #9
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	05d0      	lsls	r0, r2, #23
 80002b8:	4338      	orrs	r0, r7
 80002ba:	07e4      	lsls	r4, r4, #31
 80002bc:	4320      	orrs	r0, r4
 80002be:	bcc0      	pop	{r6, r7}
 80002c0:	46b9      	mov	r9, r7
 80002c2:	46b0      	mov	r8, r6
 80002c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002c6:	1aa8      	subs	r0, r5, r2
 80002c8:	4680      	mov	r8, r0
 80002ca:	2800      	cmp	r0, #0
 80002cc:	dd45      	ble.n	800035a <__aeabi_fsub+0x13a>
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d070      	beq.n	80003b4 <__aeabi_fsub+0x194>
 80002d2:	2dff      	cmp	r5, #255	; 0xff
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fsub+0xb8>
 80002d6:	e09e      	b.n	8000416 <__aeabi_fsub+0x1f6>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	04db      	lsls	r3, r3, #19
 80002dc:	431e      	orrs	r6, r3
 80002de:	4643      	mov	r3, r8
 80002e0:	2b1b      	cmp	r3, #27
 80002e2:	dc00      	bgt.n	80002e6 <__aeabi_fsub+0xc6>
 80002e4:	e0d2      	b.n	800048c <__aeabi_fsub+0x26c>
 80002e6:	2001      	movs	r0, #1
 80002e8:	4460      	add	r0, ip
 80002ea:	0143      	lsls	r3, r0, #5
 80002ec:	d57a      	bpl.n	80003e4 <__aeabi_fsub+0x1c4>
 80002ee:	3501      	adds	r5, #1
 80002f0:	2dff      	cmp	r5, #255	; 0xff
 80002f2:	d06b      	beq.n	80003cc <__aeabi_fsub+0x1ac>
 80002f4:	2301      	movs	r3, #1
 80002f6:	4a9d      	ldr	r2, [pc, #628]	; (800056c <__aeabi_fsub+0x34c>)
 80002f8:	4003      	ands	r3, r0
 80002fa:	0840      	lsrs	r0, r0, #1
 80002fc:	4010      	ands	r0, r2
 80002fe:	4318      	orrs	r0, r3
 8000300:	e7c8      	b.n	8000294 <__aeabi_fsub+0x74>
 8000302:	2e00      	cmp	r6, #0
 8000304:	d020      	beq.n	8000348 <__aeabi_fsub+0x128>
 8000306:	428c      	cmp	r4, r1
 8000308:	d023      	beq.n	8000352 <__aeabi_fsub+0x132>
 800030a:	0028      	movs	r0, r5
 800030c:	38ff      	subs	r0, #255	; 0xff
 800030e:	2800      	cmp	r0, #0
 8000310:	d039      	beq.n	8000386 <__aeabi_fsub+0x166>
 8000312:	1b57      	subs	r7, r2, r5
 8000314:	2d00      	cmp	r5, #0
 8000316:	d000      	beq.n	800031a <__aeabi_fsub+0xfa>
 8000318:	e09d      	b.n	8000456 <__aeabi_fsub+0x236>
 800031a:	4663      	mov	r3, ip
 800031c:	2b00      	cmp	r3, #0
 800031e:	d100      	bne.n	8000322 <__aeabi_fsub+0x102>
 8000320:	e0db      	b.n	80004da <__aeabi_fsub+0x2ba>
 8000322:	1e7b      	subs	r3, r7, #1
 8000324:	2f01      	cmp	r7, #1
 8000326:	d100      	bne.n	800032a <__aeabi_fsub+0x10a>
 8000328:	e10d      	b.n	8000546 <__aeabi_fsub+0x326>
 800032a:	2fff      	cmp	r7, #255	; 0xff
 800032c:	d071      	beq.n	8000412 <__aeabi_fsub+0x1f2>
 800032e:	001f      	movs	r7, r3
 8000330:	e098      	b.n	8000464 <__aeabi_fsub+0x244>
 8000332:	2e00      	cmp	r6, #0
 8000334:	d100      	bne.n	8000338 <__aeabi_fsub+0x118>
 8000336:	e0a7      	b.n	8000488 <__aeabi_fsub+0x268>
 8000338:	1e42      	subs	r2, r0, #1
 800033a:	2801      	cmp	r0, #1
 800033c:	d100      	bne.n	8000340 <__aeabi_fsub+0x120>
 800033e:	e0e6      	b.n	800050e <__aeabi_fsub+0x2ee>
 8000340:	28ff      	cmp	r0, #255	; 0xff
 8000342:	d068      	beq.n	8000416 <__aeabi_fsub+0x1f6>
 8000344:	0010      	movs	r0, r2
 8000346:	e78f      	b.n	8000268 <__aeabi_fsub+0x48>
 8000348:	2001      	movs	r0, #1
 800034a:	4041      	eors	r1, r0
 800034c:	42a1      	cmp	r1, r4
 800034e:	d000      	beq.n	8000352 <__aeabi_fsub+0x132>
 8000350:	e77f      	b.n	8000252 <__aeabi_fsub+0x32>
 8000352:	20ff      	movs	r0, #255	; 0xff
 8000354:	4240      	negs	r0, r0
 8000356:	4680      	mov	r8, r0
 8000358:	44a8      	add	r8, r5
 800035a:	4640      	mov	r0, r8
 800035c:	2800      	cmp	r0, #0
 800035e:	d038      	beq.n	80003d2 <__aeabi_fsub+0x1b2>
 8000360:	1b51      	subs	r1, r2, r5
 8000362:	2d00      	cmp	r5, #0
 8000364:	d100      	bne.n	8000368 <__aeabi_fsub+0x148>
 8000366:	e0ae      	b.n	80004c6 <__aeabi_fsub+0x2a6>
 8000368:	2aff      	cmp	r2, #255	; 0xff
 800036a:	d100      	bne.n	800036e <__aeabi_fsub+0x14e>
 800036c:	e0df      	b.n	800052e <__aeabi_fsub+0x30e>
 800036e:	2380      	movs	r3, #128	; 0x80
 8000370:	4660      	mov	r0, ip
 8000372:	04db      	lsls	r3, r3, #19
 8000374:	4318      	orrs	r0, r3
 8000376:	4684      	mov	ip, r0
 8000378:	291b      	cmp	r1, #27
 800037a:	dc00      	bgt.n	800037e <__aeabi_fsub+0x15e>
 800037c:	e0d9      	b.n	8000532 <__aeabi_fsub+0x312>
 800037e:	2001      	movs	r0, #1
 8000380:	0015      	movs	r5, r2
 8000382:	1980      	adds	r0, r0, r6
 8000384:	e7b1      	b.n	80002ea <__aeabi_fsub+0xca>
 8000386:	20fe      	movs	r0, #254	; 0xfe
 8000388:	1c6a      	adds	r2, r5, #1
 800038a:	4210      	tst	r0, r2
 800038c:	d171      	bne.n	8000472 <__aeabi_fsub+0x252>
 800038e:	2d00      	cmp	r5, #0
 8000390:	d000      	beq.n	8000394 <__aeabi_fsub+0x174>
 8000392:	e0a6      	b.n	80004e2 <__aeabi_fsub+0x2c2>
 8000394:	4663      	mov	r3, ip
 8000396:	2b00      	cmp	r3, #0
 8000398:	d100      	bne.n	800039c <__aeabi_fsub+0x17c>
 800039a:	e0d9      	b.n	8000550 <__aeabi_fsub+0x330>
 800039c:	2200      	movs	r2, #0
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fsub+0x184>
 80003a2:	e788      	b.n	80002b6 <__aeabi_fsub+0x96>
 80003a4:	1b98      	subs	r0, r3, r6
 80003a6:	0143      	lsls	r3, r0, #5
 80003a8:	d400      	bmi.n	80003ac <__aeabi_fsub+0x18c>
 80003aa:	e0e1      	b.n	8000570 <__aeabi_fsub+0x350>
 80003ac:	4663      	mov	r3, ip
 80003ae:	000c      	movs	r4, r1
 80003b0:	1af0      	subs	r0, r6, r3
 80003b2:	e76f      	b.n	8000294 <__aeabi_fsub+0x74>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d100      	bne.n	80003ba <__aeabi_fsub+0x19a>
 80003b8:	e0b7      	b.n	800052a <__aeabi_fsub+0x30a>
 80003ba:	0002      	movs	r2, r0
 80003bc:	3a01      	subs	r2, #1
 80003be:	2801      	cmp	r0, #1
 80003c0:	d100      	bne.n	80003c4 <__aeabi_fsub+0x1a4>
 80003c2:	e09c      	b.n	80004fe <__aeabi_fsub+0x2de>
 80003c4:	28ff      	cmp	r0, #255	; 0xff
 80003c6:	d026      	beq.n	8000416 <__aeabi_fsub+0x1f6>
 80003c8:	4690      	mov	r8, r2
 80003ca:	e788      	b.n	80002de <__aeabi_fsub+0xbe>
 80003cc:	22ff      	movs	r2, #255	; 0xff
 80003ce:	2700      	movs	r7, #0
 80003d0:	e771      	b.n	80002b6 <__aeabi_fsub+0x96>
 80003d2:	20fe      	movs	r0, #254	; 0xfe
 80003d4:	1c6a      	adds	r2, r5, #1
 80003d6:	4210      	tst	r0, r2
 80003d8:	d064      	beq.n	80004a4 <__aeabi_fsub+0x284>
 80003da:	2aff      	cmp	r2, #255	; 0xff
 80003dc:	d0f6      	beq.n	80003cc <__aeabi_fsub+0x1ac>
 80003de:	0015      	movs	r5, r2
 80003e0:	4466      	add	r6, ip
 80003e2:	0870      	lsrs	r0, r6, #1
 80003e4:	0743      	lsls	r3, r0, #29
 80003e6:	d000      	beq.n	80003ea <__aeabi_fsub+0x1ca>
 80003e8:	e756      	b.n	8000298 <__aeabi_fsub+0x78>
 80003ea:	08c3      	lsrs	r3, r0, #3
 80003ec:	2dff      	cmp	r5, #255	; 0xff
 80003ee:	d012      	beq.n	8000416 <__aeabi_fsub+0x1f6>
 80003f0:	025b      	lsls	r3, r3, #9
 80003f2:	0a5f      	lsrs	r7, r3, #9
 80003f4:	b2ea      	uxtb	r2, r5
 80003f6:	e75e      	b.n	80002b6 <__aeabi_fsub+0x96>
 80003f8:	4662      	mov	r2, ip
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	d100      	bne.n	8000400 <__aeabi_fsub+0x1e0>
 80003fe:	e096      	b.n	800052e <__aeabi_fsub+0x30e>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d008      	beq.n	8000416 <__aeabi_fsub+0x1f6>
 8000404:	2280      	movs	r2, #128	; 0x80
 8000406:	03d2      	lsls	r2, r2, #15
 8000408:	4213      	tst	r3, r2
 800040a:	d004      	beq.n	8000416 <__aeabi_fsub+0x1f6>
 800040c:	4648      	mov	r0, r9
 800040e:	4210      	tst	r0, r2
 8000410:	d101      	bne.n	8000416 <__aeabi_fsub+0x1f6>
 8000412:	000c      	movs	r4, r1
 8000414:	464b      	mov	r3, r9
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0d8      	beq.n	80003cc <__aeabi_fsub+0x1ac>
 800041a:	2780      	movs	r7, #128	; 0x80
 800041c:	03ff      	lsls	r7, r7, #15
 800041e:	431f      	orrs	r7, r3
 8000420:	027f      	lsls	r7, r7, #9
 8000422:	22ff      	movs	r2, #255	; 0xff
 8000424:	0a7f      	lsrs	r7, r7, #9
 8000426:	e746      	b.n	80002b6 <__aeabi_fsub+0x96>
 8000428:	2320      	movs	r3, #32
 800042a:	003a      	movs	r2, r7
 800042c:	1b45      	subs	r5, r0, r5
 800042e:	0038      	movs	r0, r7
 8000430:	3501      	adds	r5, #1
 8000432:	40ea      	lsrs	r2, r5
 8000434:	1b5d      	subs	r5, r3, r5
 8000436:	40a8      	lsls	r0, r5
 8000438:	1e43      	subs	r3, r0, #1
 800043a:	4198      	sbcs	r0, r3
 800043c:	2500      	movs	r5, #0
 800043e:	4310      	orrs	r0, r2
 8000440:	e728      	b.n	8000294 <__aeabi_fsub+0x74>
 8000442:	2320      	movs	r3, #32
 8000444:	1a1b      	subs	r3, r3, r0
 8000446:	0032      	movs	r2, r6
 8000448:	409e      	lsls	r6, r3
 800044a:	40c2      	lsrs	r2, r0
 800044c:	0030      	movs	r0, r6
 800044e:	1e43      	subs	r3, r0, #1
 8000450:	4198      	sbcs	r0, r3
 8000452:	4310      	orrs	r0, r2
 8000454:	e70c      	b.n	8000270 <__aeabi_fsub+0x50>
 8000456:	2aff      	cmp	r2, #255	; 0xff
 8000458:	d0db      	beq.n	8000412 <__aeabi_fsub+0x1f2>
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	4660      	mov	r0, ip
 800045e:	04db      	lsls	r3, r3, #19
 8000460:	4318      	orrs	r0, r3
 8000462:	4684      	mov	ip, r0
 8000464:	2f1b      	cmp	r7, #27
 8000466:	dd56      	ble.n	8000516 <__aeabi_fsub+0x2f6>
 8000468:	2001      	movs	r0, #1
 800046a:	000c      	movs	r4, r1
 800046c:	0015      	movs	r5, r2
 800046e:	1a30      	subs	r0, r6, r0
 8000470:	e700      	b.n	8000274 <__aeabi_fsub+0x54>
 8000472:	4663      	mov	r3, ip
 8000474:	1b9f      	subs	r7, r3, r6
 8000476:	017b      	lsls	r3, r7, #5
 8000478:	d43d      	bmi.n	80004f6 <__aeabi_fsub+0x2d6>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d000      	beq.n	8000480 <__aeabi_fsub+0x260>
 800047e:	e6fe      	b.n	800027e <__aeabi_fsub+0x5e>
 8000480:	2400      	movs	r4, #0
 8000482:	2200      	movs	r2, #0
 8000484:	2700      	movs	r7, #0
 8000486:	e716      	b.n	80002b6 <__aeabi_fsub+0x96>
 8000488:	0005      	movs	r5, r0
 800048a:	e7af      	b.n	80003ec <__aeabi_fsub+0x1cc>
 800048c:	0032      	movs	r2, r6
 800048e:	4643      	mov	r3, r8
 8000490:	4641      	mov	r1, r8
 8000492:	40da      	lsrs	r2, r3
 8000494:	2320      	movs	r3, #32
 8000496:	1a5b      	subs	r3, r3, r1
 8000498:	409e      	lsls	r6, r3
 800049a:	0030      	movs	r0, r6
 800049c:	1e43      	subs	r3, r0, #1
 800049e:	4198      	sbcs	r0, r3
 80004a0:	4310      	orrs	r0, r2
 80004a2:	e721      	b.n	80002e8 <__aeabi_fsub+0xc8>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d1a7      	bne.n	80003f8 <__aeabi_fsub+0x1d8>
 80004a8:	4663      	mov	r3, ip
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d059      	beq.n	8000562 <__aeabi_fsub+0x342>
 80004ae:	2200      	movs	r2, #0
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fsub+0x296>
 80004b4:	e6ff      	b.n	80002b6 <__aeabi_fsub+0x96>
 80004b6:	0030      	movs	r0, r6
 80004b8:	4460      	add	r0, ip
 80004ba:	0143      	lsls	r3, r0, #5
 80004bc:	d592      	bpl.n	80003e4 <__aeabi_fsub+0x1c4>
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <__aeabi_fsub+0x348>)
 80004c0:	3501      	adds	r5, #1
 80004c2:	4018      	ands	r0, r3
 80004c4:	e78e      	b.n	80003e4 <__aeabi_fsub+0x1c4>
 80004c6:	4663      	mov	r3, ip
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d047      	beq.n	800055c <__aeabi_fsub+0x33c>
 80004cc:	1e4b      	subs	r3, r1, #1
 80004ce:	2901      	cmp	r1, #1
 80004d0:	d015      	beq.n	80004fe <__aeabi_fsub+0x2de>
 80004d2:	29ff      	cmp	r1, #255	; 0xff
 80004d4:	d02b      	beq.n	800052e <__aeabi_fsub+0x30e>
 80004d6:	0019      	movs	r1, r3
 80004d8:	e74e      	b.n	8000378 <__aeabi_fsub+0x158>
 80004da:	000c      	movs	r4, r1
 80004dc:	464b      	mov	r3, r9
 80004de:	003d      	movs	r5, r7
 80004e0:	e784      	b.n	80003ec <__aeabi_fsub+0x1cc>
 80004e2:	4662      	mov	r2, ip
 80004e4:	2a00      	cmp	r2, #0
 80004e6:	d18b      	bne.n	8000400 <__aeabi_fsub+0x1e0>
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d192      	bne.n	8000412 <__aeabi_fsub+0x1f2>
 80004ec:	2780      	movs	r7, #128	; 0x80
 80004ee:	2400      	movs	r4, #0
 80004f0:	22ff      	movs	r2, #255	; 0xff
 80004f2:	03ff      	lsls	r7, r7, #15
 80004f4:	e6df      	b.n	80002b6 <__aeabi_fsub+0x96>
 80004f6:	4663      	mov	r3, ip
 80004f8:	000c      	movs	r4, r1
 80004fa:	1af7      	subs	r7, r6, r3
 80004fc:	e6bf      	b.n	800027e <__aeabi_fsub+0x5e>
 80004fe:	0030      	movs	r0, r6
 8000500:	4460      	add	r0, ip
 8000502:	2501      	movs	r5, #1
 8000504:	0143      	lsls	r3, r0, #5
 8000506:	d400      	bmi.n	800050a <__aeabi_fsub+0x2ea>
 8000508:	e76c      	b.n	80003e4 <__aeabi_fsub+0x1c4>
 800050a:	2502      	movs	r5, #2
 800050c:	e6f2      	b.n	80002f4 <__aeabi_fsub+0xd4>
 800050e:	4663      	mov	r3, ip
 8000510:	2501      	movs	r5, #1
 8000512:	1b98      	subs	r0, r3, r6
 8000514:	e6ae      	b.n	8000274 <__aeabi_fsub+0x54>
 8000516:	2320      	movs	r3, #32
 8000518:	4664      	mov	r4, ip
 800051a:	4660      	mov	r0, ip
 800051c:	40fc      	lsrs	r4, r7
 800051e:	1bdf      	subs	r7, r3, r7
 8000520:	40b8      	lsls	r0, r7
 8000522:	1e43      	subs	r3, r0, #1
 8000524:	4198      	sbcs	r0, r3
 8000526:	4320      	orrs	r0, r4
 8000528:	e79f      	b.n	800046a <__aeabi_fsub+0x24a>
 800052a:	0005      	movs	r5, r0
 800052c:	e75e      	b.n	80003ec <__aeabi_fsub+0x1cc>
 800052e:	464b      	mov	r3, r9
 8000530:	e771      	b.n	8000416 <__aeabi_fsub+0x1f6>
 8000532:	2320      	movs	r3, #32
 8000534:	4665      	mov	r5, ip
 8000536:	4660      	mov	r0, ip
 8000538:	40cd      	lsrs	r5, r1
 800053a:	1a59      	subs	r1, r3, r1
 800053c:	4088      	lsls	r0, r1
 800053e:	1e43      	subs	r3, r0, #1
 8000540:	4198      	sbcs	r0, r3
 8000542:	4328      	orrs	r0, r5
 8000544:	e71c      	b.n	8000380 <__aeabi_fsub+0x160>
 8000546:	4663      	mov	r3, ip
 8000548:	000c      	movs	r4, r1
 800054a:	2501      	movs	r5, #1
 800054c:	1af0      	subs	r0, r6, r3
 800054e:	e691      	b.n	8000274 <__aeabi_fsub+0x54>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d095      	beq.n	8000480 <__aeabi_fsub+0x260>
 8000554:	000c      	movs	r4, r1
 8000556:	464f      	mov	r7, r9
 8000558:	2200      	movs	r2, #0
 800055a:	e6ac      	b.n	80002b6 <__aeabi_fsub+0x96>
 800055c:	464b      	mov	r3, r9
 800055e:	000d      	movs	r5, r1
 8000560:	e744      	b.n	80003ec <__aeabi_fsub+0x1cc>
 8000562:	464f      	mov	r7, r9
 8000564:	2200      	movs	r2, #0
 8000566:	e6a6      	b.n	80002b6 <__aeabi_fsub+0x96>
 8000568:	fbffffff 	.word	0xfbffffff
 800056c:	7dffffff 	.word	0x7dffffff
 8000570:	2800      	cmp	r0, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_fsub+0x356>
 8000574:	e736      	b.n	80003e4 <__aeabi_fsub+0x1c4>
 8000576:	2400      	movs	r4, #0
 8000578:	2700      	movs	r7, #0
 800057a:	e69c      	b.n	80002b6 <__aeabi_fsub+0x96>

0800057c <__aeabi_ddiv>:
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	4657      	mov	r7, sl
 8000580:	464e      	mov	r6, r9
 8000582:	4645      	mov	r5, r8
 8000584:	46de      	mov	lr, fp
 8000586:	b5e0      	push	{r5, r6, r7, lr}
 8000588:	4681      	mov	r9, r0
 800058a:	0005      	movs	r5, r0
 800058c:	030c      	lsls	r4, r1, #12
 800058e:	0048      	lsls	r0, r1, #1
 8000590:	4692      	mov	sl, r2
 8000592:	001f      	movs	r7, r3
 8000594:	b085      	sub	sp, #20
 8000596:	0b24      	lsrs	r4, r4, #12
 8000598:	0d40      	lsrs	r0, r0, #21
 800059a:	0fce      	lsrs	r6, r1, #31
 800059c:	2800      	cmp	r0, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_ddiv+0x26>
 80005a0:	e156      	b.n	8000850 <__aeabi_ddiv+0x2d4>
 80005a2:	4bd4      	ldr	r3, [pc, #848]	; (80008f4 <__aeabi_ddiv+0x378>)
 80005a4:	4298      	cmp	r0, r3
 80005a6:	d100      	bne.n	80005aa <__aeabi_ddiv+0x2e>
 80005a8:	e172      	b.n	8000890 <__aeabi_ddiv+0x314>
 80005aa:	0f6b      	lsrs	r3, r5, #29
 80005ac:	00e4      	lsls	r4, r4, #3
 80005ae:	431c      	orrs	r4, r3
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	041b      	lsls	r3, r3, #16
 80005b4:	4323      	orrs	r3, r4
 80005b6:	4698      	mov	r8, r3
 80005b8:	4bcf      	ldr	r3, [pc, #828]	; (80008f8 <__aeabi_ddiv+0x37c>)
 80005ba:	00ed      	lsls	r5, r5, #3
 80005bc:	469b      	mov	fp, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	4699      	mov	r9, r3
 80005c2:	4483      	add	fp, r0
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	033c      	lsls	r4, r7, #12
 80005c8:	007b      	lsls	r3, r7, #1
 80005ca:	4650      	mov	r0, sl
 80005cc:	0b24      	lsrs	r4, r4, #12
 80005ce:	0d5b      	lsrs	r3, r3, #21
 80005d0:	0fff      	lsrs	r7, r7, #31
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_ddiv+0x5c>
 80005d6:	e11f      	b.n	8000818 <__aeabi_ddiv+0x29c>
 80005d8:	4ac6      	ldr	r2, [pc, #792]	; (80008f4 <__aeabi_ddiv+0x378>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d100      	bne.n	80005e0 <__aeabi_ddiv+0x64>
 80005de:	e162      	b.n	80008a6 <__aeabi_ddiv+0x32a>
 80005e0:	49c5      	ldr	r1, [pc, #788]	; (80008f8 <__aeabi_ddiv+0x37c>)
 80005e2:	0f42      	lsrs	r2, r0, #29
 80005e4:	468c      	mov	ip, r1
 80005e6:	00e4      	lsls	r4, r4, #3
 80005e8:	4659      	mov	r1, fp
 80005ea:	4314      	orrs	r4, r2
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	4463      	add	r3, ip
 80005f0:	0412      	lsls	r2, r2, #16
 80005f2:	1acb      	subs	r3, r1, r3
 80005f4:	4314      	orrs	r4, r2
 80005f6:	469b      	mov	fp, r3
 80005f8:	00c2      	lsls	r2, r0, #3
 80005fa:	2000      	movs	r0, #0
 80005fc:	0033      	movs	r3, r6
 80005fe:	407b      	eors	r3, r7
 8000600:	469a      	mov	sl, r3
 8000602:	464b      	mov	r3, r9
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d827      	bhi.n	8000658 <__aeabi_ddiv+0xdc>
 8000608:	49bc      	ldr	r1, [pc, #752]	; (80008fc <__aeabi_ddiv+0x380>)
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	58cb      	ldr	r3, [r1, r3]
 800060e:	469f      	mov	pc, r3
 8000610:	46b2      	mov	sl, r6
 8000612:	9b00      	ldr	r3, [sp, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d016      	beq.n	8000646 <__aeabi_ddiv+0xca>
 8000618:	2b03      	cmp	r3, #3
 800061a:	d100      	bne.n	800061e <__aeabi_ddiv+0xa2>
 800061c:	e28e      	b.n	8000b3c <__aeabi_ddiv+0x5c0>
 800061e:	2b01      	cmp	r3, #1
 8000620:	d000      	beq.n	8000624 <__aeabi_ddiv+0xa8>
 8000622:	e0d9      	b.n	80007d8 <__aeabi_ddiv+0x25c>
 8000624:	2300      	movs	r3, #0
 8000626:	2400      	movs	r4, #0
 8000628:	2500      	movs	r5, #0
 800062a:	4652      	mov	r2, sl
 800062c:	051b      	lsls	r3, r3, #20
 800062e:	4323      	orrs	r3, r4
 8000630:	07d2      	lsls	r2, r2, #31
 8000632:	4313      	orrs	r3, r2
 8000634:	0028      	movs	r0, r5
 8000636:	0019      	movs	r1, r3
 8000638:	b005      	add	sp, #20
 800063a:	bcf0      	pop	{r4, r5, r6, r7}
 800063c:	46bb      	mov	fp, r7
 800063e:	46b2      	mov	sl, r6
 8000640:	46a9      	mov	r9, r5
 8000642:	46a0      	mov	r8, r4
 8000644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000646:	2400      	movs	r4, #0
 8000648:	2500      	movs	r5, #0
 800064a:	4baa      	ldr	r3, [pc, #680]	; (80008f4 <__aeabi_ddiv+0x378>)
 800064c:	e7ed      	b.n	800062a <__aeabi_ddiv+0xae>
 800064e:	46ba      	mov	sl, r7
 8000650:	46a0      	mov	r8, r4
 8000652:	0015      	movs	r5, r2
 8000654:	9000      	str	r0, [sp, #0]
 8000656:	e7dc      	b.n	8000612 <__aeabi_ddiv+0x96>
 8000658:	4544      	cmp	r4, r8
 800065a:	d200      	bcs.n	800065e <__aeabi_ddiv+0xe2>
 800065c:	e1c7      	b.n	80009ee <__aeabi_ddiv+0x472>
 800065e:	d100      	bne.n	8000662 <__aeabi_ddiv+0xe6>
 8000660:	e1c2      	b.n	80009e8 <__aeabi_ddiv+0x46c>
 8000662:	2301      	movs	r3, #1
 8000664:	425b      	negs	r3, r3
 8000666:	469c      	mov	ip, r3
 8000668:	002e      	movs	r6, r5
 800066a:	4640      	mov	r0, r8
 800066c:	2500      	movs	r5, #0
 800066e:	44e3      	add	fp, ip
 8000670:	0223      	lsls	r3, r4, #8
 8000672:	0e14      	lsrs	r4, r2, #24
 8000674:	431c      	orrs	r4, r3
 8000676:	0c1b      	lsrs	r3, r3, #16
 8000678:	4699      	mov	r9, r3
 800067a:	0423      	lsls	r3, r4, #16
 800067c:	0c1f      	lsrs	r7, r3, #16
 800067e:	0212      	lsls	r2, r2, #8
 8000680:	4649      	mov	r1, r9
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9701      	str	r7, [sp, #4]
 8000686:	f7ff fdc5 	bl	8000214 <__aeabi_uidivmod>
 800068a:	0002      	movs	r2, r0
 800068c:	437a      	muls	r2, r7
 800068e:	040b      	lsls	r3, r1, #16
 8000690:	0c31      	lsrs	r1, r6, #16
 8000692:	4680      	mov	r8, r0
 8000694:	4319      	orrs	r1, r3
 8000696:	428a      	cmp	r2, r1
 8000698:	d907      	bls.n	80006aa <__aeabi_ddiv+0x12e>
 800069a:	2301      	movs	r3, #1
 800069c:	425b      	negs	r3, r3
 800069e:	469c      	mov	ip, r3
 80006a0:	1909      	adds	r1, r1, r4
 80006a2:	44e0      	add	r8, ip
 80006a4:	428c      	cmp	r4, r1
 80006a6:	d800      	bhi.n	80006aa <__aeabi_ddiv+0x12e>
 80006a8:	e207      	b.n	8000aba <__aeabi_ddiv+0x53e>
 80006aa:	1a88      	subs	r0, r1, r2
 80006ac:	4649      	mov	r1, r9
 80006ae:	f7ff fdb1 	bl	8000214 <__aeabi_uidivmod>
 80006b2:	0409      	lsls	r1, r1, #16
 80006b4:	468c      	mov	ip, r1
 80006b6:	0431      	lsls	r1, r6, #16
 80006b8:	4666      	mov	r6, ip
 80006ba:	9a01      	ldr	r2, [sp, #4]
 80006bc:	0c09      	lsrs	r1, r1, #16
 80006be:	4342      	muls	r2, r0
 80006c0:	0003      	movs	r3, r0
 80006c2:	4331      	orrs	r1, r6
 80006c4:	428a      	cmp	r2, r1
 80006c6:	d904      	bls.n	80006d2 <__aeabi_ddiv+0x156>
 80006c8:	1909      	adds	r1, r1, r4
 80006ca:	3b01      	subs	r3, #1
 80006cc:	428c      	cmp	r4, r1
 80006ce:	d800      	bhi.n	80006d2 <__aeabi_ddiv+0x156>
 80006d0:	e1ed      	b.n	8000aae <__aeabi_ddiv+0x532>
 80006d2:	1a88      	subs	r0, r1, r2
 80006d4:	4642      	mov	r2, r8
 80006d6:	0412      	lsls	r2, r2, #16
 80006d8:	431a      	orrs	r2, r3
 80006da:	4690      	mov	r8, r2
 80006dc:	4641      	mov	r1, r8
 80006de:	9b00      	ldr	r3, [sp, #0]
 80006e0:	040e      	lsls	r6, r1, #16
 80006e2:	0c1b      	lsrs	r3, r3, #16
 80006e4:	001f      	movs	r7, r3
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	9b00      	ldr	r3, [sp, #0]
 80006ea:	0c36      	lsrs	r6, r6, #16
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	0c19      	lsrs	r1, r3, #16
 80006f0:	000b      	movs	r3, r1
 80006f2:	4373      	muls	r3, r6
 80006f4:	0c12      	lsrs	r2, r2, #16
 80006f6:	437e      	muls	r6, r7
 80006f8:	9103      	str	r1, [sp, #12]
 80006fa:	4351      	muls	r1, r2
 80006fc:	437a      	muls	r2, r7
 80006fe:	0c1f      	lsrs	r7, r3, #16
 8000700:	46bc      	mov	ip, r7
 8000702:	1876      	adds	r6, r6, r1
 8000704:	4466      	add	r6, ip
 8000706:	42b1      	cmp	r1, r6
 8000708:	d903      	bls.n	8000712 <__aeabi_ddiv+0x196>
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	0249      	lsls	r1, r1, #9
 800070e:	468c      	mov	ip, r1
 8000710:	4462      	add	r2, ip
 8000712:	0c31      	lsrs	r1, r6, #16
 8000714:	188a      	adds	r2, r1, r2
 8000716:	0431      	lsls	r1, r6, #16
 8000718:	041e      	lsls	r6, r3, #16
 800071a:	0c36      	lsrs	r6, r6, #16
 800071c:	198e      	adds	r6, r1, r6
 800071e:	4290      	cmp	r0, r2
 8000720:	d302      	bcc.n	8000728 <__aeabi_ddiv+0x1ac>
 8000722:	d112      	bne.n	800074a <__aeabi_ddiv+0x1ce>
 8000724:	42b5      	cmp	r5, r6
 8000726:	d210      	bcs.n	800074a <__aeabi_ddiv+0x1ce>
 8000728:	4643      	mov	r3, r8
 800072a:	1e59      	subs	r1, r3, #1
 800072c:	9b00      	ldr	r3, [sp, #0]
 800072e:	469c      	mov	ip, r3
 8000730:	4465      	add	r5, ip
 8000732:	001f      	movs	r7, r3
 8000734:	429d      	cmp	r5, r3
 8000736:	419b      	sbcs	r3, r3
 8000738:	425b      	negs	r3, r3
 800073a:	191b      	adds	r3, r3, r4
 800073c:	18c0      	adds	r0, r0, r3
 800073e:	4284      	cmp	r4, r0
 8000740:	d200      	bcs.n	8000744 <__aeabi_ddiv+0x1c8>
 8000742:	e1a0      	b.n	8000a86 <__aeabi_ddiv+0x50a>
 8000744:	d100      	bne.n	8000748 <__aeabi_ddiv+0x1cc>
 8000746:	e19b      	b.n	8000a80 <__aeabi_ddiv+0x504>
 8000748:	4688      	mov	r8, r1
 800074a:	1bae      	subs	r6, r5, r6
 800074c:	42b5      	cmp	r5, r6
 800074e:	41ad      	sbcs	r5, r5
 8000750:	1a80      	subs	r0, r0, r2
 8000752:	426d      	negs	r5, r5
 8000754:	1b40      	subs	r0, r0, r5
 8000756:	4284      	cmp	r4, r0
 8000758:	d100      	bne.n	800075c <__aeabi_ddiv+0x1e0>
 800075a:	e1d5      	b.n	8000b08 <__aeabi_ddiv+0x58c>
 800075c:	4649      	mov	r1, r9
 800075e:	f7ff fd59 	bl	8000214 <__aeabi_uidivmod>
 8000762:	9a01      	ldr	r2, [sp, #4]
 8000764:	040b      	lsls	r3, r1, #16
 8000766:	4342      	muls	r2, r0
 8000768:	0c31      	lsrs	r1, r6, #16
 800076a:	0005      	movs	r5, r0
 800076c:	4319      	orrs	r1, r3
 800076e:	428a      	cmp	r2, r1
 8000770:	d900      	bls.n	8000774 <__aeabi_ddiv+0x1f8>
 8000772:	e16c      	b.n	8000a4e <__aeabi_ddiv+0x4d2>
 8000774:	1a88      	subs	r0, r1, r2
 8000776:	4649      	mov	r1, r9
 8000778:	f7ff fd4c 	bl	8000214 <__aeabi_uidivmod>
 800077c:	9a01      	ldr	r2, [sp, #4]
 800077e:	0436      	lsls	r6, r6, #16
 8000780:	4342      	muls	r2, r0
 8000782:	0409      	lsls	r1, r1, #16
 8000784:	0c36      	lsrs	r6, r6, #16
 8000786:	0003      	movs	r3, r0
 8000788:	430e      	orrs	r6, r1
 800078a:	42b2      	cmp	r2, r6
 800078c:	d900      	bls.n	8000790 <__aeabi_ddiv+0x214>
 800078e:	e153      	b.n	8000a38 <__aeabi_ddiv+0x4bc>
 8000790:	9803      	ldr	r0, [sp, #12]
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	0002      	movs	r2, r0
 8000796:	042d      	lsls	r5, r5, #16
 8000798:	431d      	orrs	r5, r3
 800079a:	9f02      	ldr	r7, [sp, #8]
 800079c:	042b      	lsls	r3, r5, #16
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	435a      	muls	r2, r3
 80007a2:	437b      	muls	r3, r7
 80007a4:	469c      	mov	ip, r3
 80007a6:	0c29      	lsrs	r1, r5, #16
 80007a8:	4348      	muls	r0, r1
 80007aa:	0c13      	lsrs	r3, r2, #16
 80007ac:	4484      	add	ip, r0
 80007ae:	4463      	add	r3, ip
 80007b0:	4379      	muls	r1, r7
 80007b2:	4298      	cmp	r0, r3
 80007b4:	d903      	bls.n	80007be <__aeabi_ddiv+0x242>
 80007b6:	2080      	movs	r0, #128	; 0x80
 80007b8:	0240      	lsls	r0, r0, #9
 80007ba:	4684      	mov	ip, r0
 80007bc:	4461      	add	r1, ip
 80007be:	0c18      	lsrs	r0, r3, #16
 80007c0:	0412      	lsls	r2, r2, #16
 80007c2:	041b      	lsls	r3, r3, #16
 80007c4:	0c12      	lsrs	r2, r2, #16
 80007c6:	1841      	adds	r1, r0, r1
 80007c8:	189b      	adds	r3, r3, r2
 80007ca:	428e      	cmp	r6, r1
 80007cc:	d200      	bcs.n	80007d0 <__aeabi_ddiv+0x254>
 80007ce:	e0ff      	b.n	80009d0 <__aeabi_ddiv+0x454>
 80007d0:	d100      	bne.n	80007d4 <__aeabi_ddiv+0x258>
 80007d2:	e0fa      	b.n	80009ca <__aeabi_ddiv+0x44e>
 80007d4:	2301      	movs	r3, #1
 80007d6:	431d      	orrs	r5, r3
 80007d8:	4a49      	ldr	r2, [pc, #292]	; (8000900 <__aeabi_ddiv+0x384>)
 80007da:	445a      	add	r2, fp
 80007dc:	2a00      	cmp	r2, #0
 80007de:	dc00      	bgt.n	80007e2 <__aeabi_ddiv+0x266>
 80007e0:	e0aa      	b.n	8000938 <__aeabi_ddiv+0x3bc>
 80007e2:	076b      	lsls	r3, r5, #29
 80007e4:	d000      	beq.n	80007e8 <__aeabi_ddiv+0x26c>
 80007e6:	e13d      	b.n	8000a64 <__aeabi_ddiv+0x4e8>
 80007e8:	08ed      	lsrs	r5, r5, #3
 80007ea:	4643      	mov	r3, r8
 80007ec:	01db      	lsls	r3, r3, #7
 80007ee:	d506      	bpl.n	80007fe <__aeabi_ddiv+0x282>
 80007f0:	4642      	mov	r2, r8
 80007f2:	4b44      	ldr	r3, [pc, #272]	; (8000904 <__aeabi_ddiv+0x388>)
 80007f4:	401a      	ands	r2, r3
 80007f6:	4690      	mov	r8, r2
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	00d2      	lsls	r2, r2, #3
 80007fc:	445a      	add	r2, fp
 80007fe:	4b42      	ldr	r3, [pc, #264]	; (8000908 <__aeabi_ddiv+0x38c>)
 8000800:	429a      	cmp	r2, r3
 8000802:	dd00      	ble.n	8000806 <__aeabi_ddiv+0x28a>
 8000804:	e71f      	b.n	8000646 <__aeabi_ddiv+0xca>
 8000806:	4643      	mov	r3, r8
 8000808:	075b      	lsls	r3, r3, #29
 800080a:	431d      	orrs	r5, r3
 800080c:	4643      	mov	r3, r8
 800080e:	0552      	lsls	r2, r2, #21
 8000810:	025c      	lsls	r4, r3, #9
 8000812:	0b24      	lsrs	r4, r4, #12
 8000814:	0d53      	lsrs	r3, r2, #21
 8000816:	e708      	b.n	800062a <__aeabi_ddiv+0xae>
 8000818:	4652      	mov	r2, sl
 800081a:	4322      	orrs	r2, r4
 800081c:	d100      	bne.n	8000820 <__aeabi_ddiv+0x2a4>
 800081e:	e07b      	b.n	8000918 <__aeabi_ddiv+0x39c>
 8000820:	2c00      	cmp	r4, #0
 8000822:	d100      	bne.n	8000826 <__aeabi_ddiv+0x2aa>
 8000824:	e0fa      	b.n	8000a1c <__aeabi_ddiv+0x4a0>
 8000826:	0020      	movs	r0, r4
 8000828:	f000 fcb8 	bl	800119c <__clzsi2>
 800082c:	0002      	movs	r2, r0
 800082e:	3a0b      	subs	r2, #11
 8000830:	231d      	movs	r3, #29
 8000832:	0001      	movs	r1, r0
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	4652      	mov	r2, sl
 8000838:	3908      	subs	r1, #8
 800083a:	40da      	lsrs	r2, r3
 800083c:	408c      	lsls	r4, r1
 800083e:	4314      	orrs	r4, r2
 8000840:	4652      	mov	r2, sl
 8000842:	408a      	lsls	r2, r1
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <__aeabi_ddiv+0x390>)
 8000846:	4458      	add	r0, fp
 8000848:	469b      	mov	fp, r3
 800084a:	4483      	add	fp, r0
 800084c:	2000      	movs	r0, #0
 800084e:	e6d5      	b.n	80005fc <__aeabi_ddiv+0x80>
 8000850:	464b      	mov	r3, r9
 8000852:	4323      	orrs	r3, r4
 8000854:	4698      	mov	r8, r3
 8000856:	d044      	beq.n	80008e2 <__aeabi_ddiv+0x366>
 8000858:	2c00      	cmp	r4, #0
 800085a:	d100      	bne.n	800085e <__aeabi_ddiv+0x2e2>
 800085c:	e0ce      	b.n	80009fc <__aeabi_ddiv+0x480>
 800085e:	0020      	movs	r0, r4
 8000860:	f000 fc9c 	bl	800119c <__clzsi2>
 8000864:	0001      	movs	r1, r0
 8000866:	0002      	movs	r2, r0
 8000868:	390b      	subs	r1, #11
 800086a:	231d      	movs	r3, #29
 800086c:	1a5b      	subs	r3, r3, r1
 800086e:	4649      	mov	r1, r9
 8000870:	0010      	movs	r0, r2
 8000872:	40d9      	lsrs	r1, r3
 8000874:	3808      	subs	r0, #8
 8000876:	4084      	lsls	r4, r0
 8000878:	000b      	movs	r3, r1
 800087a:	464d      	mov	r5, r9
 800087c:	4323      	orrs	r3, r4
 800087e:	4698      	mov	r8, r3
 8000880:	4085      	lsls	r5, r0
 8000882:	4823      	ldr	r0, [pc, #140]	; (8000910 <__aeabi_ddiv+0x394>)
 8000884:	1a83      	subs	r3, r0, r2
 8000886:	469b      	mov	fp, r3
 8000888:	2300      	movs	r3, #0
 800088a:	4699      	mov	r9, r3
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	e69a      	b.n	80005c6 <__aeabi_ddiv+0x4a>
 8000890:	464b      	mov	r3, r9
 8000892:	4323      	orrs	r3, r4
 8000894:	4698      	mov	r8, r3
 8000896:	d11d      	bne.n	80008d4 <__aeabi_ddiv+0x358>
 8000898:	2308      	movs	r3, #8
 800089a:	4699      	mov	r9, r3
 800089c:	3b06      	subs	r3, #6
 800089e:	2500      	movs	r5, #0
 80008a0:	4683      	mov	fp, r0
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	e68f      	b.n	80005c6 <__aeabi_ddiv+0x4a>
 80008a6:	4652      	mov	r2, sl
 80008a8:	4322      	orrs	r2, r4
 80008aa:	d109      	bne.n	80008c0 <__aeabi_ddiv+0x344>
 80008ac:	2302      	movs	r3, #2
 80008ae:	4649      	mov	r1, r9
 80008b0:	4319      	orrs	r1, r3
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <__aeabi_ddiv+0x398>)
 80008b4:	4689      	mov	r9, r1
 80008b6:	469c      	mov	ip, r3
 80008b8:	2400      	movs	r4, #0
 80008ba:	2002      	movs	r0, #2
 80008bc:	44e3      	add	fp, ip
 80008be:	e69d      	b.n	80005fc <__aeabi_ddiv+0x80>
 80008c0:	2303      	movs	r3, #3
 80008c2:	464a      	mov	r2, r9
 80008c4:	431a      	orrs	r2, r3
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <__aeabi_ddiv+0x398>)
 80008c8:	4691      	mov	r9, r2
 80008ca:	469c      	mov	ip, r3
 80008cc:	4652      	mov	r2, sl
 80008ce:	2003      	movs	r0, #3
 80008d0:	44e3      	add	fp, ip
 80008d2:	e693      	b.n	80005fc <__aeabi_ddiv+0x80>
 80008d4:	230c      	movs	r3, #12
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b09      	subs	r3, #9
 80008da:	46a0      	mov	r8, r4
 80008dc:	4683      	mov	fp, r0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	e671      	b.n	80005c6 <__aeabi_ddiv+0x4a>
 80008e2:	2304      	movs	r3, #4
 80008e4:	4699      	mov	r9, r3
 80008e6:	2300      	movs	r3, #0
 80008e8:	469b      	mov	fp, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	2500      	movs	r5, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	e669      	b.n	80005c6 <__aeabi_ddiv+0x4a>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	000007ff 	.word	0x000007ff
 80008f8:	fffffc01 	.word	0xfffffc01
 80008fc:	08004b38 	.word	0x08004b38
 8000900:	000003ff 	.word	0x000003ff
 8000904:	feffffff 	.word	0xfeffffff
 8000908:	000007fe 	.word	0x000007fe
 800090c:	000003f3 	.word	0x000003f3
 8000910:	fffffc0d 	.word	0xfffffc0d
 8000914:	fffff801 	.word	0xfffff801
 8000918:	4649      	mov	r1, r9
 800091a:	2301      	movs	r3, #1
 800091c:	4319      	orrs	r1, r3
 800091e:	4689      	mov	r9, r1
 8000920:	2400      	movs	r4, #0
 8000922:	2001      	movs	r0, #1
 8000924:	e66a      	b.n	80005fc <__aeabi_ddiv+0x80>
 8000926:	2300      	movs	r3, #0
 8000928:	2480      	movs	r4, #128	; 0x80
 800092a:	469a      	mov	sl, r3
 800092c:	2500      	movs	r5, #0
 800092e:	4b8a      	ldr	r3, [pc, #552]	; (8000b58 <__aeabi_ddiv+0x5dc>)
 8000930:	0324      	lsls	r4, r4, #12
 8000932:	e67a      	b.n	800062a <__aeabi_ddiv+0xae>
 8000934:	2501      	movs	r5, #1
 8000936:	426d      	negs	r5, r5
 8000938:	2301      	movs	r3, #1
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	2b38      	cmp	r3, #56	; 0x38
 800093e:	dd00      	ble.n	8000942 <__aeabi_ddiv+0x3c6>
 8000940:	e670      	b.n	8000624 <__aeabi_ddiv+0xa8>
 8000942:	2b1f      	cmp	r3, #31
 8000944:	dc00      	bgt.n	8000948 <__aeabi_ddiv+0x3cc>
 8000946:	e0bf      	b.n	8000ac8 <__aeabi_ddiv+0x54c>
 8000948:	211f      	movs	r1, #31
 800094a:	4249      	negs	r1, r1
 800094c:	1a8a      	subs	r2, r1, r2
 800094e:	4641      	mov	r1, r8
 8000950:	40d1      	lsrs	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	2b20      	cmp	r3, #32
 8000956:	d004      	beq.n	8000962 <__aeabi_ddiv+0x3e6>
 8000958:	4641      	mov	r1, r8
 800095a:	4b80      	ldr	r3, [pc, #512]	; (8000b5c <__aeabi_ddiv+0x5e0>)
 800095c:	445b      	add	r3, fp
 800095e:	4099      	lsls	r1, r3
 8000960:	430d      	orrs	r5, r1
 8000962:	1e6b      	subs	r3, r5, #1
 8000964:	419d      	sbcs	r5, r3
 8000966:	2307      	movs	r3, #7
 8000968:	432a      	orrs	r2, r5
 800096a:	001d      	movs	r5, r3
 800096c:	2400      	movs	r4, #0
 800096e:	4015      	ands	r5, r2
 8000970:	4213      	tst	r3, r2
 8000972:	d100      	bne.n	8000976 <__aeabi_ddiv+0x3fa>
 8000974:	e0d4      	b.n	8000b20 <__aeabi_ddiv+0x5a4>
 8000976:	210f      	movs	r1, #15
 8000978:	2300      	movs	r3, #0
 800097a:	4011      	ands	r1, r2
 800097c:	2904      	cmp	r1, #4
 800097e:	d100      	bne.n	8000982 <__aeabi_ddiv+0x406>
 8000980:	e0cb      	b.n	8000b1a <__aeabi_ddiv+0x59e>
 8000982:	1d11      	adds	r1, r2, #4
 8000984:	4291      	cmp	r1, r2
 8000986:	4192      	sbcs	r2, r2
 8000988:	4252      	negs	r2, r2
 800098a:	189b      	adds	r3, r3, r2
 800098c:	000a      	movs	r2, r1
 800098e:	0219      	lsls	r1, r3, #8
 8000990:	d400      	bmi.n	8000994 <__aeabi_ddiv+0x418>
 8000992:	e0c2      	b.n	8000b1a <__aeabi_ddiv+0x59e>
 8000994:	2301      	movs	r3, #1
 8000996:	2400      	movs	r4, #0
 8000998:	2500      	movs	r5, #0
 800099a:	e646      	b.n	800062a <__aeabi_ddiv+0xae>
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	4641      	mov	r1, r8
 80009a0:	031b      	lsls	r3, r3, #12
 80009a2:	4219      	tst	r1, r3
 80009a4:	d008      	beq.n	80009b8 <__aeabi_ddiv+0x43c>
 80009a6:	421c      	tst	r4, r3
 80009a8:	d106      	bne.n	80009b8 <__aeabi_ddiv+0x43c>
 80009aa:	431c      	orrs	r4, r3
 80009ac:	0324      	lsls	r4, r4, #12
 80009ae:	46ba      	mov	sl, r7
 80009b0:	0015      	movs	r5, r2
 80009b2:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <__aeabi_ddiv+0x5dc>)
 80009b4:	0b24      	lsrs	r4, r4, #12
 80009b6:	e638      	b.n	800062a <__aeabi_ddiv+0xae>
 80009b8:	2480      	movs	r4, #128	; 0x80
 80009ba:	4643      	mov	r3, r8
 80009bc:	0324      	lsls	r4, r4, #12
 80009be:	431c      	orrs	r4, r3
 80009c0:	0324      	lsls	r4, r4, #12
 80009c2:	46b2      	mov	sl, r6
 80009c4:	4b64      	ldr	r3, [pc, #400]	; (8000b58 <__aeabi_ddiv+0x5dc>)
 80009c6:	0b24      	lsrs	r4, r4, #12
 80009c8:	e62f      	b.n	800062a <__aeabi_ddiv+0xae>
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_ddiv+0x454>
 80009ce:	e703      	b.n	80007d8 <__aeabi_ddiv+0x25c>
 80009d0:	19a6      	adds	r6, r4, r6
 80009d2:	1e68      	subs	r0, r5, #1
 80009d4:	42a6      	cmp	r6, r4
 80009d6:	d200      	bcs.n	80009da <__aeabi_ddiv+0x45e>
 80009d8:	e08d      	b.n	8000af6 <__aeabi_ddiv+0x57a>
 80009da:	428e      	cmp	r6, r1
 80009dc:	d200      	bcs.n	80009e0 <__aeabi_ddiv+0x464>
 80009de:	e0a3      	b.n	8000b28 <__aeabi_ddiv+0x5ac>
 80009e0:	d100      	bne.n	80009e4 <__aeabi_ddiv+0x468>
 80009e2:	e0b3      	b.n	8000b4c <__aeabi_ddiv+0x5d0>
 80009e4:	0005      	movs	r5, r0
 80009e6:	e6f5      	b.n	80007d4 <__aeabi_ddiv+0x258>
 80009e8:	42aa      	cmp	r2, r5
 80009ea:	d900      	bls.n	80009ee <__aeabi_ddiv+0x472>
 80009ec:	e639      	b.n	8000662 <__aeabi_ddiv+0xe6>
 80009ee:	4643      	mov	r3, r8
 80009f0:	07de      	lsls	r6, r3, #31
 80009f2:	0858      	lsrs	r0, r3, #1
 80009f4:	086b      	lsrs	r3, r5, #1
 80009f6:	431e      	orrs	r6, r3
 80009f8:	07ed      	lsls	r5, r5, #31
 80009fa:	e639      	b.n	8000670 <__aeabi_ddiv+0xf4>
 80009fc:	4648      	mov	r0, r9
 80009fe:	f000 fbcd 	bl	800119c <__clzsi2>
 8000a02:	0001      	movs	r1, r0
 8000a04:	0002      	movs	r2, r0
 8000a06:	3115      	adds	r1, #21
 8000a08:	3220      	adds	r2, #32
 8000a0a:	291c      	cmp	r1, #28
 8000a0c:	dc00      	bgt.n	8000a10 <__aeabi_ddiv+0x494>
 8000a0e:	e72c      	b.n	800086a <__aeabi_ddiv+0x2ee>
 8000a10:	464b      	mov	r3, r9
 8000a12:	3808      	subs	r0, #8
 8000a14:	4083      	lsls	r3, r0
 8000a16:	2500      	movs	r5, #0
 8000a18:	4698      	mov	r8, r3
 8000a1a:	e732      	b.n	8000882 <__aeabi_ddiv+0x306>
 8000a1c:	f000 fbbe 	bl	800119c <__clzsi2>
 8000a20:	0003      	movs	r3, r0
 8000a22:	001a      	movs	r2, r3
 8000a24:	3215      	adds	r2, #21
 8000a26:	3020      	adds	r0, #32
 8000a28:	2a1c      	cmp	r2, #28
 8000a2a:	dc00      	bgt.n	8000a2e <__aeabi_ddiv+0x4b2>
 8000a2c:	e700      	b.n	8000830 <__aeabi_ddiv+0x2b4>
 8000a2e:	4654      	mov	r4, sl
 8000a30:	3b08      	subs	r3, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	409c      	lsls	r4, r3
 8000a36:	e705      	b.n	8000844 <__aeabi_ddiv+0x2c8>
 8000a38:	1936      	adds	r6, r6, r4
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	42b4      	cmp	r4, r6
 8000a3e:	d900      	bls.n	8000a42 <__aeabi_ddiv+0x4c6>
 8000a40:	e6a6      	b.n	8000790 <__aeabi_ddiv+0x214>
 8000a42:	42b2      	cmp	r2, r6
 8000a44:	d800      	bhi.n	8000a48 <__aeabi_ddiv+0x4cc>
 8000a46:	e6a3      	b.n	8000790 <__aeabi_ddiv+0x214>
 8000a48:	1e83      	subs	r3, r0, #2
 8000a4a:	1936      	adds	r6, r6, r4
 8000a4c:	e6a0      	b.n	8000790 <__aeabi_ddiv+0x214>
 8000a4e:	1909      	adds	r1, r1, r4
 8000a50:	3d01      	subs	r5, #1
 8000a52:	428c      	cmp	r4, r1
 8000a54:	d900      	bls.n	8000a58 <__aeabi_ddiv+0x4dc>
 8000a56:	e68d      	b.n	8000774 <__aeabi_ddiv+0x1f8>
 8000a58:	428a      	cmp	r2, r1
 8000a5a:	d800      	bhi.n	8000a5e <__aeabi_ddiv+0x4e2>
 8000a5c:	e68a      	b.n	8000774 <__aeabi_ddiv+0x1f8>
 8000a5e:	1e85      	subs	r5, r0, #2
 8000a60:	1909      	adds	r1, r1, r4
 8000a62:	e687      	b.n	8000774 <__aeabi_ddiv+0x1f8>
 8000a64:	230f      	movs	r3, #15
 8000a66:	402b      	ands	r3, r5
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_ddiv+0x4f2>
 8000a6c:	e6bc      	b.n	80007e8 <__aeabi_ddiv+0x26c>
 8000a6e:	2305      	movs	r3, #5
 8000a70:	425b      	negs	r3, r3
 8000a72:	42ab      	cmp	r3, r5
 8000a74:	419b      	sbcs	r3, r3
 8000a76:	3504      	adds	r5, #4
 8000a78:	425b      	negs	r3, r3
 8000a7a:	08ed      	lsrs	r5, r5, #3
 8000a7c:	4498      	add	r8, r3
 8000a7e:	e6b4      	b.n	80007ea <__aeabi_ddiv+0x26e>
 8000a80:	42af      	cmp	r7, r5
 8000a82:	d900      	bls.n	8000a86 <__aeabi_ddiv+0x50a>
 8000a84:	e660      	b.n	8000748 <__aeabi_ddiv+0x1cc>
 8000a86:	4282      	cmp	r2, r0
 8000a88:	d804      	bhi.n	8000a94 <__aeabi_ddiv+0x518>
 8000a8a:	d000      	beq.n	8000a8e <__aeabi_ddiv+0x512>
 8000a8c:	e65c      	b.n	8000748 <__aeabi_ddiv+0x1cc>
 8000a8e:	42ae      	cmp	r6, r5
 8000a90:	d800      	bhi.n	8000a94 <__aeabi_ddiv+0x518>
 8000a92:	e659      	b.n	8000748 <__aeabi_ddiv+0x1cc>
 8000a94:	2302      	movs	r3, #2
 8000a96:	425b      	negs	r3, r3
 8000a98:	469c      	mov	ip, r3
 8000a9a:	9b00      	ldr	r3, [sp, #0]
 8000a9c:	44e0      	add	r8, ip
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	4465      	add	r5, ip
 8000aa2:	429d      	cmp	r5, r3
 8000aa4:	419b      	sbcs	r3, r3
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	191b      	adds	r3, r3, r4
 8000aaa:	18c0      	adds	r0, r0, r3
 8000aac:	e64d      	b.n	800074a <__aeabi_ddiv+0x1ce>
 8000aae:	428a      	cmp	r2, r1
 8000ab0:	d800      	bhi.n	8000ab4 <__aeabi_ddiv+0x538>
 8000ab2:	e60e      	b.n	80006d2 <__aeabi_ddiv+0x156>
 8000ab4:	1e83      	subs	r3, r0, #2
 8000ab6:	1909      	adds	r1, r1, r4
 8000ab8:	e60b      	b.n	80006d2 <__aeabi_ddiv+0x156>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	d800      	bhi.n	8000ac0 <__aeabi_ddiv+0x544>
 8000abe:	e5f4      	b.n	80006aa <__aeabi_ddiv+0x12e>
 8000ac0:	1e83      	subs	r3, r0, #2
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	1909      	adds	r1, r1, r4
 8000ac6:	e5f0      	b.n	80006aa <__aeabi_ddiv+0x12e>
 8000ac8:	4925      	ldr	r1, [pc, #148]	; (8000b60 <__aeabi_ddiv+0x5e4>)
 8000aca:	0028      	movs	r0, r5
 8000acc:	4459      	add	r1, fp
 8000ace:	408d      	lsls	r5, r1
 8000ad0:	4642      	mov	r2, r8
 8000ad2:	408a      	lsls	r2, r1
 8000ad4:	1e69      	subs	r1, r5, #1
 8000ad6:	418d      	sbcs	r5, r1
 8000ad8:	4641      	mov	r1, r8
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	40d9      	lsrs	r1, r3
 8000ade:	4302      	orrs	r2, r0
 8000ae0:	432a      	orrs	r2, r5
 8000ae2:	000b      	movs	r3, r1
 8000ae4:	0751      	lsls	r1, r2, #29
 8000ae6:	d100      	bne.n	8000aea <__aeabi_ddiv+0x56e>
 8000ae8:	e751      	b.n	800098e <__aeabi_ddiv+0x412>
 8000aea:	210f      	movs	r1, #15
 8000aec:	4011      	ands	r1, r2
 8000aee:	2904      	cmp	r1, #4
 8000af0:	d000      	beq.n	8000af4 <__aeabi_ddiv+0x578>
 8000af2:	e746      	b.n	8000982 <__aeabi_ddiv+0x406>
 8000af4:	e74b      	b.n	800098e <__aeabi_ddiv+0x412>
 8000af6:	0005      	movs	r5, r0
 8000af8:	428e      	cmp	r6, r1
 8000afa:	d000      	beq.n	8000afe <__aeabi_ddiv+0x582>
 8000afc:	e66a      	b.n	80007d4 <__aeabi_ddiv+0x258>
 8000afe:	9a00      	ldr	r2, [sp, #0]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d000      	beq.n	8000b06 <__aeabi_ddiv+0x58a>
 8000b04:	e666      	b.n	80007d4 <__aeabi_ddiv+0x258>
 8000b06:	e667      	b.n	80007d8 <__aeabi_ddiv+0x25c>
 8000b08:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <__aeabi_ddiv+0x5e8>)
 8000b0a:	445a      	add	r2, fp
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	dc00      	bgt.n	8000b12 <__aeabi_ddiv+0x596>
 8000b10:	e710      	b.n	8000934 <__aeabi_ddiv+0x3b8>
 8000b12:	2301      	movs	r3, #1
 8000b14:	2500      	movs	r5, #0
 8000b16:	4498      	add	r8, r3
 8000b18:	e667      	b.n	80007ea <__aeabi_ddiv+0x26e>
 8000b1a:	075d      	lsls	r5, r3, #29
 8000b1c:	025b      	lsls	r3, r3, #9
 8000b1e:	0b1c      	lsrs	r4, r3, #12
 8000b20:	08d2      	lsrs	r2, r2, #3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4315      	orrs	r5, r2
 8000b26:	e580      	b.n	800062a <__aeabi_ddiv+0xae>
 8000b28:	9800      	ldr	r0, [sp, #0]
 8000b2a:	3d02      	subs	r5, #2
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	4282      	cmp	r2, r0
 8000b30:	41bf      	sbcs	r7, r7
 8000b32:	427f      	negs	r7, r7
 8000b34:	193c      	adds	r4, r7, r4
 8000b36:	1936      	adds	r6, r6, r4
 8000b38:	9200      	str	r2, [sp, #0]
 8000b3a:	e7dd      	b.n	8000af8 <__aeabi_ddiv+0x57c>
 8000b3c:	2480      	movs	r4, #128	; 0x80
 8000b3e:	4643      	mov	r3, r8
 8000b40:	0324      	lsls	r4, r4, #12
 8000b42:	431c      	orrs	r4, r3
 8000b44:	0324      	lsls	r4, r4, #12
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__aeabi_ddiv+0x5dc>)
 8000b48:	0b24      	lsrs	r4, r4, #12
 8000b4a:	e56e      	b.n	800062a <__aeabi_ddiv+0xae>
 8000b4c:	9a00      	ldr	r2, [sp, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ea      	bcc.n	8000b28 <__aeabi_ddiv+0x5ac>
 8000b52:	0005      	movs	r5, r0
 8000b54:	e7d3      	b.n	8000afe <__aeabi_ddiv+0x582>
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	000007ff 	.word	0x000007ff
 8000b5c:	0000043e 	.word	0x0000043e
 8000b60:	0000041e 	.word	0x0000041e
 8000b64:	000003ff 	.word	0x000003ff

08000b68 <__aeabi_dmul>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	4657      	mov	r7, sl
 8000b6c:	464e      	mov	r6, r9
 8000b6e:	4645      	mov	r5, r8
 8000b70:	46de      	mov	lr, fp
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	4698      	mov	r8, r3
 8000b76:	030c      	lsls	r4, r1, #12
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	0006      	movs	r6, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	b087      	sub	sp, #28
 8000b80:	0b24      	lsrs	r4, r4, #12
 8000b82:	0d5b      	lsrs	r3, r3, #21
 8000b84:	0fcf      	lsrs	r7, r1, #31
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dmul+0x24>
 8000b8a:	e15c      	b.n	8000e46 <__aeabi_dmul+0x2de>
 8000b8c:	4ad9      	ldr	r2, [pc, #868]	; (8000ef4 <__aeabi_dmul+0x38c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dmul+0x2c>
 8000b92:	e175      	b.n	8000e80 <__aeabi_dmul+0x318>
 8000b94:	0f42      	lsrs	r2, r0, #29
 8000b96:	00e4      	lsls	r4, r4, #3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0412      	lsls	r2, r2, #16
 8000b9e:	4314      	orrs	r4, r2
 8000ba0:	4ad5      	ldr	r2, [pc, #852]	; (8000ef8 <__aeabi_dmul+0x390>)
 8000ba2:	00c5      	lsls	r5, r0, #3
 8000ba4:	4694      	mov	ip, r2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2300      	movs	r3, #0
 8000bac:	4699      	mov	r9, r3
 8000bae:	469b      	mov	fp, r3
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	4642      	mov	r2, r8
 8000bb4:	031e      	lsls	r6, r3, #12
 8000bb6:	0fd2      	lsrs	r2, r2, #31
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4650      	mov	r0, sl
 8000bbc:	4690      	mov	r8, r2
 8000bbe:	0b36      	lsrs	r6, r6, #12
 8000bc0:	0d5b      	lsrs	r3, r3, #21
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dmul+0x5e>
 8000bc4:	e120      	b.n	8000e08 <__aeabi_dmul+0x2a0>
 8000bc6:	4acb      	ldr	r2, [pc, #812]	; (8000ef4 <__aeabi_dmul+0x38c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d100      	bne.n	8000bce <__aeabi_dmul+0x66>
 8000bcc:	e162      	b.n	8000e94 <__aeabi_dmul+0x32c>
 8000bce:	49ca      	ldr	r1, [pc, #808]	; (8000ef8 <__aeabi_dmul+0x390>)
 8000bd0:	0f42      	lsrs	r2, r0, #29
 8000bd2:	468c      	mov	ip, r1
 8000bd4:	9900      	ldr	r1, [sp, #0]
 8000bd6:	4463      	add	r3, ip
 8000bd8:	00f6      	lsls	r6, r6, #3
 8000bda:	468c      	mov	ip, r1
 8000bdc:	4316      	orrs	r6, r2
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	449c      	add	ip, r3
 8000be2:	0412      	lsls	r2, r2, #16
 8000be4:	4663      	mov	r3, ip
 8000be6:	4316      	orrs	r6, r2
 8000be8:	00c2      	lsls	r2, r0, #3
 8000bea:	2000      	movs	r0, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	9900      	ldr	r1, [sp, #0]
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	3101      	adds	r1, #1
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	4649      	mov	r1, r9
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	290f      	cmp	r1, #15
 8000bfe:	d826      	bhi.n	8000c4e <__aeabi_dmul+0xe6>
 8000c00:	4bbe      	ldr	r3, [pc, #760]	; (8000efc <__aeabi_dmul+0x394>)
 8000c02:	0089      	lsls	r1, r1, #2
 8000c04:	5859      	ldr	r1, [r3, r1]
 8000c06:	468f      	mov	pc, r1
 8000c08:	4643      	mov	r3, r8
 8000c0a:	9301      	str	r3, [sp, #4]
 8000c0c:	0034      	movs	r4, r6
 8000c0e:	0015      	movs	r5, r2
 8000c10:	4683      	mov	fp, r0
 8000c12:	465b      	mov	r3, fp
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d016      	beq.n	8000c46 <__aeabi_dmul+0xde>
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dmul+0xb6>
 8000c1c:	e203      	b.n	8001026 <__aeabi_dmul+0x4be>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d000      	beq.n	8000c24 <__aeabi_dmul+0xbc>
 8000c22:	e0cd      	b.n	8000dc0 <__aeabi_dmul+0x258>
 8000c24:	2200      	movs	r2, #0
 8000c26:	2400      	movs	r4, #0
 8000c28:	2500      	movs	r5, #0
 8000c2a:	9b01      	ldr	r3, [sp, #4]
 8000c2c:	0512      	lsls	r2, r2, #20
 8000c2e:	4322      	orrs	r2, r4
 8000c30:	07db      	lsls	r3, r3, #31
 8000c32:	431a      	orrs	r2, r3
 8000c34:	0028      	movs	r0, r5
 8000c36:	0011      	movs	r1, r2
 8000c38:	b007      	add	sp, #28
 8000c3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c3c:	46bb      	mov	fp, r7
 8000c3e:	46b2      	mov	sl, r6
 8000c40:	46a9      	mov	r9, r5
 8000c42:	46a0      	mov	r8, r4
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	2400      	movs	r4, #0
 8000c48:	2500      	movs	r5, #0
 8000c4a:	4aaa      	ldr	r2, [pc, #680]	; (8000ef4 <__aeabi_dmul+0x38c>)
 8000c4c:	e7ed      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8000c4e:	0c28      	lsrs	r0, r5, #16
 8000c50:	042d      	lsls	r5, r5, #16
 8000c52:	0c2d      	lsrs	r5, r5, #16
 8000c54:	002b      	movs	r3, r5
 8000c56:	0c11      	lsrs	r1, r2, #16
 8000c58:	0412      	lsls	r2, r2, #16
 8000c5a:	0c12      	lsrs	r2, r2, #16
 8000c5c:	4353      	muls	r3, r2
 8000c5e:	4698      	mov	r8, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	002f      	movs	r7, r5
 8000c64:	4343      	muls	r3, r0
 8000c66:	4699      	mov	r9, r3
 8000c68:	434f      	muls	r7, r1
 8000c6a:	444f      	add	r7, r9
 8000c6c:	46bb      	mov	fp, r7
 8000c6e:	4647      	mov	r7, r8
 8000c70:	000b      	movs	r3, r1
 8000c72:	0c3f      	lsrs	r7, r7, #16
 8000c74:	46ba      	mov	sl, r7
 8000c76:	4343      	muls	r3, r0
 8000c78:	44da      	add	sl, fp
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	45d1      	cmp	r9, sl
 8000c7e:	d904      	bls.n	8000c8a <__aeabi_dmul+0x122>
 8000c80:	2780      	movs	r7, #128	; 0x80
 8000c82:	027f      	lsls	r7, r7, #9
 8000c84:	46b9      	mov	r9, r7
 8000c86:	444b      	add	r3, r9
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	4653      	mov	r3, sl
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	469b      	mov	fp, r3
 8000c90:	4653      	mov	r3, sl
 8000c92:	041f      	lsls	r7, r3, #16
 8000c94:	4643      	mov	r3, r8
 8000c96:	041b      	lsls	r3, r3, #16
 8000c98:	0c1b      	lsrs	r3, r3, #16
 8000c9a:	4698      	mov	r8, r3
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4443      	add	r3, r8
 8000ca0:	9304      	str	r3, [sp, #16]
 8000ca2:	0c33      	lsrs	r3, r6, #16
 8000ca4:	0436      	lsls	r6, r6, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	4698      	mov	r8, r3
 8000caa:	0033      	movs	r3, r6
 8000cac:	4343      	muls	r3, r0
 8000cae:	4699      	mov	r9, r3
 8000cb0:	4643      	mov	r3, r8
 8000cb2:	4343      	muls	r3, r0
 8000cb4:	002f      	movs	r7, r5
 8000cb6:	469a      	mov	sl, r3
 8000cb8:	4643      	mov	r3, r8
 8000cba:	4377      	muls	r7, r6
 8000cbc:	435d      	muls	r5, r3
 8000cbe:	0c38      	lsrs	r0, r7, #16
 8000cc0:	444d      	add	r5, r9
 8000cc2:	1945      	adds	r5, r0, r5
 8000cc4:	45a9      	cmp	r9, r5
 8000cc6:	d903      	bls.n	8000cd0 <__aeabi_dmul+0x168>
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	025b      	lsls	r3, r3, #9
 8000ccc:	4699      	mov	r9, r3
 8000cce:	44ca      	add	sl, r9
 8000cd0:	043f      	lsls	r7, r7, #16
 8000cd2:	0c28      	lsrs	r0, r5, #16
 8000cd4:	0c3f      	lsrs	r7, r7, #16
 8000cd6:	042d      	lsls	r5, r5, #16
 8000cd8:	19ed      	adds	r5, r5, r7
 8000cda:	0c27      	lsrs	r7, r4, #16
 8000cdc:	0424      	lsls	r4, r4, #16
 8000cde:	0c24      	lsrs	r4, r4, #16
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	0020      	movs	r0, r4
 8000ce4:	4350      	muls	r0, r2
 8000ce6:	437a      	muls	r2, r7
 8000ce8:	4691      	mov	r9, r2
 8000cea:	003a      	movs	r2, r7
 8000cec:	4453      	add	r3, sl
 8000cee:	9305      	str	r3, [sp, #20]
 8000cf0:	0c03      	lsrs	r3, r0, #16
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	434a      	muls	r2, r1
 8000cf6:	4361      	muls	r1, r4
 8000cf8:	4449      	add	r1, r9
 8000cfa:	4451      	add	r1, sl
 8000cfc:	44ab      	add	fp, r5
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d903      	bls.n	8000d0a <__aeabi_dmul+0x1a2>
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	025b      	lsls	r3, r3, #9
 8000d06:	4699      	mov	r9, r3
 8000d08:	444a      	add	r2, r9
 8000d0a:	0400      	lsls	r0, r0, #16
 8000d0c:	0c0b      	lsrs	r3, r1, #16
 8000d0e:	0c00      	lsrs	r0, r0, #16
 8000d10:	0409      	lsls	r1, r1, #16
 8000d12:	1809      	adds	r1, r1, r0
 8000d14:	0020      	movs	r0, r4
 8000d16:	4699      	mov	r9, r3
 8000d18:	4643      	mov	r3, r8
 8000d1a:	4370      	muls	r0, r6
 8000d1c:	435c      	muls	r4, r3
 8000d1e:	437e      	muls	r6, r7
 8000d20:	435f      	muls	r7, r3
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	4698      	mov	r8, r3
 8000d26:	19a4      	adds	r4, r4, r6
 8000d28:	4444      	add	r4, r8
 8000d2a:	444a      	add	r2, r9
 8000d2c:	9703      	str	r7, [sp, #12]
 8000d2e:	42a6      	cmp	r6, r4
 8000d30:	d904      	bls.n	8000d3c <__aeabi_dmul+0x1d4>
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	025b      	lsls	r3, r3, #9
 8000d36:	4698      	mov	r8, r3
 8000d38:	4447      	add	r7, r8
 8000d3a:	9703      	str	r7, [sp, #12]
 8000d3c:	0423      	lsls	r3, r4, #16
 8000d3e:	9e02      	ldr	r6, [sp, #8]
 8000d40:	469a      	mov	sl, r3
 8000d42:	9b05      	ldr	r3, [sp, #20]
 8000d44:	445e      	add	r6, fp
 8000d46:	4698      	mov	r8, r3
 8000d48:	42ae      	cmp	r6, r5
 8000d4a:	41ad      	sbcs	r5, r5
 8000d4c:	1876      	adds	r6, r6, r1
 8000d4e:	428e      	cmp	r6, r1
 8000d50:	4189      	sbcs	r1, r1
 8000d52:	0400      	lsls	r0, r0, #16
 8000d54:	0c00      	lsrs	r0, r0, #16
 8000d56:	4450      	add	r0, sl
 8000d58:	4440      	add	r0, r8
 8000d5a:	426d      	negs	r5, r5
 8000d5c:	1947      	adds	r7, r0, r5
 8000d5e:	46b8      	mov	r8, r7
 8000d60:	4693      	mov	fp, r2
 8000d62:	4249      	negs	r1, r1
 8000d64:	4689      	mov	r9, r1
 8000d66:	44c3      	add	fp, r8
 8000d68:	44d9      	add	r9, fp
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	4180      	sbcs	r0, r0
 8000d6e:	45a8      	cmp	r8, r5
 8000d70:	41ad      	sbcs	r5, r5
 8000d72:	4593      	cmp	fp, r2
 8000d74:	4192      	sbcs	r2, r2
 8000d76:	4589      	cmp	r9, r1
 8000d78:	4189      	sbcs	r1, r1
 8000d7a:	426d      	negs	r5, r5
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	4328      	orrs	r0, r5
 8000d80:	0c24      	lsrs	r4, r4, #16
 8000d82:	4252      	negs	r2, r2
 8000d84:	4249      	negs	r1, r1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	9b03      	ldr	r3, [sp, #12]
 8000d8a:	1900      	adds	r0, r0, r4
 8000d8c:	1880      	adds	r0, r0, r2
 8000d8e:	18c7      	adds	r7, r0, r3
 8000d90:	464b      	mov	r3, r9
 8000d92:	0ddc      	lsrs	r4, r3, #23
 8000d94:	9b04      	ldr	r3, [sp, #16]
 8000d96:	0275      	lsls	r5, r6, #9
 8000d98:	431d      	orrs	r5, r3
 8000d9a:	1e6a      	subs	r2, r5, #1
 8000d9c:	4195      	sbcs	r5, r2
 8000d9e:	464b      	mov	r3, r9
 8000da0:	0df6      	lsrs	r6, r6, #23
 8000da2:	027f      	lsls	r7, r7, #9
 8000da4:	4335      	orrs	r5, r6
 8000da6:	025a      	lsls	r2, r3, #9
 8000da8:	433c      	orrs	r4, r7
 8000daa:	4315      	orrs	r5, r2
 8000dac:	01fb      	lsls	r3, r7, #7
 8000dae:	d400      	bmi.n	8000db2 <__aeabi_dmul+0x24a>
 8000db0:	e11c      	b.n	8000fec <__aeabi_dmul+0x484>
 8000db2:	2101      	movs	r1, #1
 8000db4:	086a      	lsrs	r2, r5, #1
 8000db6:	400d      	ands	r5, r1
 8000db8:	4315      	orrs	r5, r2
 8000dba:	07e2      	lsls	r2, r4, #31
 8000dbc:	4315      	orrs	r5, r2
 8000dbe:	0864      	lsrs	r4, r4, #1
 8000dc0:	494f      	ldr	r1, [pc, #316]	; (8000f00 <__aeabi_dmul+0x398>)
 8000dc2:	4461      	add	r1, ip
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	dc00      	bgt.n	8000dca <__aeabi_dmul+0x262>
 8000dc8:	e0b0      	b.n	8000f2c <__aeabi_dmul+0x3c4>
 8000dca:	076b      	lsls	r3, r5, #29
 8000dcc:	d009      	beq.n	8000de2 <__aeabi_dmul+0x27a>
 8000dce:	220f      	movs	r2, #15
 8000dd0:	402a      	ands	r2, r5
 8000dd2:	2a04      	cmp	r2, #4
 8000dd4:	d005      	beq.n	8000de2 <__aeabi_dmul+0x27a>
 8000dd6:	1d2a      	adds	r2, r5, #4
 8000dd8:	42aa      	cmp	r2, r5
 8000dda:	41ad      	sbcs	r5, r5
 8000ddc:	426d      	negs	r5, r5
 8000dde:	1964      	adds	r4, r4, r5
 8000de0:	0015      	movs	r5, r2
 8000de2:	01e3      	lsls	r3, r4, #7
 8000de4:	d504      	bpl.n	8000df0 <__aeabi_dmul+0x288>
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <__aeabi_dmul+0x39c>)
 8000dea:	00c9      	lsls	r1, r1, #3
 8000dec:	4014      	ands	r4, r2
 8000dee:	4461      	add	r1, ip
 8000df0:	4a45      	ldr	r2, [pc, #276]	; (8000f08 <__aeabi_dmul+0x3a0>)
 8000df2:	4291      	cmp	r1, r2
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dmul+0x290>
 8000df6:	e726      	b.n	8000c46 <__aeabi_dmul+0xde>
 8000df8:	0762      	lsls	r2, r4, #29
 8000dfa:	08ed      	lsrs	r5, r5, #3
 8000dfc:	0264      	lsls	r4, r4, #9
 8000dfe:	0549      	lsls	r1, r1, #21
 8000e00:	4315      	orrs	r5, r2
 8000e02:	0b24      	lsrs	r4, r4, #12
 8000e04:	0d4a      	lsrs	r2, r1, #21
 8000e06:	e710      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8000e08:	4652      	mov	r2, sl
 8000e0a:	4332      	orrs	r2, r6
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_dmul+0x2a8>
 8000e0e:	e07f      	b.n	8000f10 <__aeabi_dmul+0x3a8>
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dmul+0x2ae>
 8000e14:	e0dc      	b.n	8000fd0 <__aeabi_dmul+0x468>
 8000e16:	0030      	movs	r0, r6
 8000e18:	f000 f9c0 	bl	800119c <__clzsi2>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	3a0b      	subs	r2, #11
 8000e20:	231d      	movs	r3, #29
 8000e22:	0001      	movs	r1, r0
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	4652      	mov	r2, sl
 8000e28:	3908      	subs	r1, #8
 8000e2a:	40da      	lsrs	r2, r3
 8000e2c:	408e      	lsls	r6, r1
 8000e2e:	4316      	orrs	r6, r2
 8000e30:	4652      	mov	r2, sl
 8000e32:	408a      	lsls	r2, r1
 8000e34:	9b00      	ldr	r3, [sp, #0]
 8000e36:	4935      	ldr	r1, [pc, #212]	; (8000f0c <__aeabi_dmul+0x3a4>)
 8000e38:	1a18      	subs	r0, r3, r0
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	4463      	add	r3, ip
 8000e40:	2000      	movs	r0, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	e6d3      	b.n	8000bee <__aeabi_dmul+0x86>
 8000e46:	0025      	movs	r5, r4
 8000e48:	4305      	orrs	r5, r0
 8000e4a:	d04a      	beq.n	8000ee2 <__aeabi_dmul+0x37a>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dmul+0x2ea>
 8000e50:	e0b0      	b.n	8000fb4 <__aeabi_dmul+0x44c>
 8000e52:	0020      	movs	r0, r4
 8000e54:	f000 f9a2 	bl	800119c <__clzsi2>
 8000e58:	0001      	movs	r1, r0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	390b      	subs	r1, #11
 8000e5e:	231d      	movs	r3, #29
 8000e60:	0010      	movs	r0, r2
 8000e62:	1a5b      	subs	r3, r3, r1
 8000e64:	0031      	movs	r1, r6
 8000e66:	0035      	movs	r5, r6
 8000e68:	3808      	subs	r0, #8
 8000e6a:	4084      	lsls	r4, r0
 8000e6c:	40d9      	lsrs	r1, r3
 8000e6e:	4085      	lsls	r5, r0
 8000e70:	430c      	orrs	r4, r1
 8000e72:	4826      	ldr	r0, [pc, #152]	; (8000f0c <__aeabi_dmul+0x3a4>)
 8000e74:	1a83      	subs	r3, r0, r2
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	e697      	b.n	8000bb0 <__aeabi_dmul+0x48>
 8000e80:	0005      	movs	r5, r0
 8000e82:	4325      	orrs	r5, r4
 8000e84:	d126      	bne.n	8000ed4 <__aeabi_dmul+0x36c>
 8000e86:	2208      	movs	r2, #8
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	4691      	mov	r9, r2
 8000e90:	469b      	mov	fp, r3
 8000e92:	e68d      	b.n	8000bb0 <__aeabi_dmul+0x48>
 8000e94:	4652      	mov	r2, sl
 8000e96:	9b00      	ldr	r3, [sp, #0]
 8000e98:	4332      	orrs	r2, r6
 8000e9a:	d110      	bne.n	8000ebe <__aeabi_dmul+0x356>
 8000e9c:	4915      	ldr	r1, [pc, #84]	; (8000ef4 <__aeabi_dmul+0x38c>)
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	468c      	mov	ip, r1
 8000ea2:	4463      	add	r3, ip
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	4319      	orrs	r1, r3
 8000eac:	4689      	mov	r9, r1
 8000eae:	2002      	movs	r0, #2
 8000eb0:	e69d      	b.n	8000bee <__aeabi_dmul+0x86>
 8000eb2:	465b      	mov	r3, fp
 8000eb4:	9701      	str	r7, [sp, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dmul+0x354>
 8000eba:	e6ad      	b.n	8000c18 <__aeabi_dmul+0xb0>
 8000ebc:	e6c3      	b.n	8000c46 <__aeabi_dmul+0xde>
 8000ebe:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <__aeabi_dmul+0x38c>)
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	4694      	mov	ip, r2
 8000ec4:	4463      	add	r3, ip
 8000ec6:	464a      	mov	r2, r9
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2303      	movs	r3, #3
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4691      	mov	r9, r2
 8000ed0:	4652      	mov	r2, sl
 8000ed2:	e68c      	b.n	8000bee <__aeabi_dmul+0x86>
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2303      	movs	r3, #3
 8000eda:	0005      	movs	r5, r0
 8000edc:	4691      	mov	r9, r2
 8000ede:	469b      	mov	fp, r3
 8000ee0:	e666      	b.n	8000bb0 <__aeabi_dmul+0x48>
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	2400      	movs	r4, #0
 8000eee:	469b      	mov	fp, r3
 8000ef0:	e65e      	b.n	8000bb0 <__aeabi_dmul+0x48>
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	000007ff 	.word	0x000007ff
 8000ef8:	fffffc01 	.word	0xfffffc01
 8000efc:	08004b78 	.word	0x08004b78
 8000f00:	000003ff 	.word	0x000003ff
 8000f04:	feffffff 	.word	0xfeffffff
 8000f08:	000007fe 	.word	0x000007fe
 8000f0c:	fffffc0d 	.word	0xfffffc0d
 8000f10:	4649      	mov	r1, r9
 8000f12:	2301      	movs	r3, #1
 8000f14:	4319      	orrs	r1, r3
 8000f16:	4689      	mov	r9, r1
 8000f18:	2600      	movs	r6, #0
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	e667      	b.n	8000bee <__aeabi_dmul+0x86>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2480      	movs	r4, #128	; 0x80
 8000f22:	2500      	movs	r5, #0
 8000f24:	4a43      	ldr	r2, [pc, #268]	; (8001034 <__aeabi_dmul+0x4cc>)
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	0324      	lsls	r4, r4, #12
 8000f2a:	e67e      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	1a40      	subs	r0, r0, r1
 8000f30:	2838      	cmp	r0, #56	; 0x38
 8000f32:	dd00      	ble.n	8000f36 <__aeabi_dmul+0x3ce>
 8000f34:	e676      	b.n	8000c24 <__aeabi_dmul+0xbc>
 8000f36:	281f      	cmp	r0, #31
 8000f38:	dd5b      	ble.n	8000ff2 <__aeabi_dmul+0x48a>
 8000f3a:	221f      	movs	r2, #31
 8000f3c:	0023      	movs	r3, r4
 8000f3e:	4252      	negs	r2, r2
 8000f40:	1a51      	subs	r1, r2, r1
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	0019      	movs	r1, r3
 8000f46:	2820      	cmp	r0, #32
 8000f48:	d003      	beq.n	8000f52 <__aeabi_dmul+0x3ea>
 8000f4a:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <__aeabi_dmul+0x4d0>)
 8000f4c:	4462      	add	r2, ip
 8000f4e:	4094      	lsls	r4, r2
 8000f50:	4325      	orrs	r5, r4
 8000f52:	1e6a      	subs	r2, r5, #1
 8000f54:	4195      	sbcs	r5, r2
 8000f56:	002a      	movs	r2, r5
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	000d      	movs	r5, r1
 8000f5e:	2400      	movs	r4, #0
 8000f60:	4015      	ands	r5, r2
 8000f62:	4211      	tst	r1, r2
 8000f64:	d05b      	beq.n	800101e <__aeabi_dmul+0x4b6>
 8000f66:	210f      	movs	r1, #15
 8000f68:	2400      	movs	r4, #0
 8000f6a:	4011      	ands	r1, r2
 8000f6c:	2904      	cmp	r1, #4
 8000f6e:	d053      	beq.n	8001018 <__aeabi_dmul+0x4b0>
 8000f70:	1d11      	adds	r1, r2, #4
 8000f72:	4291      	cmp	r1, r2
 8000f74:	4192      	sbcs	r2, r2
 8000f76:	4252      	negs	r2, r2
 8000f78:	18a4      	adds	r4, r4, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	0223      	lsls	r3, r4, #8
 8000f7e:	d54b      	bpl.n	8001018 <__aeabi_dmul+0x4b0>
 8000f80:	2201      	movs	r2, #1
 8000f82:	2400      	movs	r4, #0
 8000f84:	2500      	movs	r5, #0
 8000f86:	e650      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	031b      	lsls	r3, r3, #12
 8000f8c:	421c      	tst	r4, r3
 8000f8e:	d009      	beq.n	8000fa4 <__aeabi_dmul+0x43c>
 8000f90:	421e      	tst	r6, r3
 8000f92:	d107      	bne.n	8000fa4 <__aeabi_dmul+0x43c>
 8000f94:	4333      	orrs	r3, r6
 8000f96:	031c      	lsls	r4, r3, #12
 8000f98:	4643      	mov	r3, r8
 8000f9a:	0015      	movs	r5, r2
 8000f9c:	0b24      	lsrs	r4, r4, #12
 8000f9e:	4a25      	ldr	r2, [pc, #148]	; (8001034 <__aeabi_dmul+0x4cc>)
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	e642      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	4314      	orrs	r4, r2
 8000faa:	0324      	lsls	r4, r4, #12
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <__aeabi_dmul+0x4cc>)
 8000fae:	0b24      	lsrs	r4, r4, #12
 8000fb0:	9701      	str	r7, [sp, #4]
 8000fb2:	e63a      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8000fb4:	f000 f8f2 	bl	800119c <__clzsi2>
 8000fb8:	0001      	movs	r1, r0
 8000fba:	0002      	movs	r2, r0
 8000fbc:	3115      	adds	r1, #21
 8000fbe:	3220      	adds	r2, #32
 8000fc0:	291c      	cmp	r1, #28
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_dmul+0x45e>
 8000fc4:	e74b      	b.n	8000e5e <__aeabi_dmul+0x2f6>
 8000fc6:	0034      	movs	r4, r6
 8000fc8:	3808      	subs	r0, #8
 8000fca:	2500      	movs	r5, #0
 8000fcc:	4084      	lsls	r4, r0
 8000fce:	e750      	b.n	8000e72 <__aeabi_dmul+0x30a>
 8000fd0:	f000 f8e4 	bl	800119c <__clzsi2>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	3215      	adds	r2, #21
 8000fda:	3020      	adds	r0, #32
 8000fdc:	2a1c      	cmp	r2, #28
 8000fde:	dc00      	bgt.n	8000fe2 <__aeabi_dmul+0x47a>
 8000fe0:	e71e      	b.n	8000e20 <__aeabi_dmul+0x2b8>
 8000fe2:	4656      	mov	r6, sl
 8000fe4:	3b08      	subs	r3, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	409e      	lsls	r6, r3
 8000fea:	e723      	b.n	8000e34 <__aeabi_dmul+0x2cc>
 8000fec:	9b00      	ldr	r3, [sp, #0]
 8000fee:	469c      	mov	ip, r3
 8000ff0:	e6e6      	b.n	8000dc0 <__aeabi_dmul+0x258>
 8000ff2:	4912      	ldr	r1, [pc, #72]	; (800103c <__aeabi_dmul+0x4d4>)
 8000ff4:	0022      	movs	r2, r4
 8000ff6:	4461      	add	r1, ip
 8000ff8:	002e      	movs	r6, r5
 8000ffa:	408d      	lsls	r5, r1
 8000ffc:	408a      	lsls	r2, r1
 8000ffe:	40c6      	lsrs	r6, r0
 8001000:	1e69      	subs	r1, r5, #1
 8001002:	418d      	sbcs	r5, r1
 8001004:	4332      	orrs	r2, r6
 8001006:	432a      	orrs	r2, r5
 8001008:	40c4      	lsrs	r4, r0
 800100a:	0753      	lsls	r3, r2, #29
 800100c:	d0b6      	beq.n	8000f7c <__aeabi_dmul+0x414>
 800100e:	210f      	movs	r1, #15
 8001010:	4011      	ands	r1, r2
 8001012:	2904      	cmp	r1, #4
 8001014:	d1ac      	bne.n	8000f70 <__aeabi_dmul+0x408>
 8001016:	e7b1      	b.n	8000f7c <__aeabi_dmul+0x414>
 8001018:	0765      	lsls	r5, r4, #29
 800101a:	0264      	lsls	r4, r4, #9
 800101c:	0b24      	lsrs	r4, r4, #12
 800101e:	08d2      	lsrs	r2, r2, #3
 8001020:	4315      	orrs	r5, r2
 8001022:	2200      	movs	r2, #0
 8001024:	e601      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	0312      	lsls	r2, r2, #12
 800102a:	4314      	orrs	r4, r2
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	4a01      	ldr	r2, [pc, #4]	; (8001034 <__aeabi_dmul+0x4cc>)
 8001030:	0b24      	lsrs	r4, r4, #12
 8001032:	e5fa      	b.n	8000c2a <__aeabi_dmul+0xc2>
 8001034:	000007ff 	.word	0x000007ff
 8001038:	0000043e 	.word	0x0000043e
 800103c:	0000041e 	.word	0x0000041e

08001040 <__aeabi_ui2d>:
 8001040:	b510      	push	{r4, lr}
 8001042:	1e04      	subs	r4, r0, #0
 8001044:	d010      	beq.n	8001068 <__aeabi_ui2d+0x28>
 8001046:	f000 f8a9 	bl	800119c <__clzsi2>
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <__aeabi_ui2d+0x48>)
 800104c:	1a1b      	subs	r3, r3, r0
 800104e:	280a      	cmp	r0, #10
 8001050:	dc11      	bgt.n	8001076 <__aeabi_ui2d+0x36>
 8001052:	220b      	movs	r2, #11
 8001054:	0021      	movs	r1, r4
 8001056:	1a12      	subs	r2, r2, r0
 8001058:	40d1      	lsrs	r1, r2
 800105a:	3015      	adds	r0, #21
 800105c:	030a      	lsls	r2, r1, #12
 800105e:	055b      	lsls	r3, r3, #21
 8001060:	4084      	lsls	r4, r0
 8001062:	0b12      	lsrs	r2, r2, #12
 8001064:	0d5b      	lsrs	r3, r3, #21
 8001066:	e001      	b.n	800106c <__aeabi_ui2d+0x2c>
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	051b      	lsls	r3, r3, #20
 800106e:	4313      	orrs	r3, r2
 8001070:	0020      	movs	r0, r4
 8001072:	0019      	movs	r1, r3
 8001074:	bd10      	pop	{r4, pc}
 8001076:	0022      	movs	r2, r4
 8001078:	380b      	subs	r0, #11
 800107a:	4082      	lsls	r2, r0
 800107c:	055b      	lsls	r3, r3, #21
 800107e:	0312      	lsls	r2, r2, #12
 8001080:	2400      	movs	r4, #0
 8001082:	0b12      	lsrs	r2, r2, #12
 8001084:	0d5b      	lsrs	r3, r3, #21
 8001086:	e7f1      	b.n	800106c <__aeabi_ui2d+0x2c>
 8001088:	0000041e 	.word	0x0000041e

0800108c <__aeabi_d2f>:
 800108c:	0002      	movs	r2, r0
 800108e:	004b      	lsls	r3, r1, #1
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001092:	0d5b      	lsrs	r3, r3, #21
 8001094:	030c      	lsls	r4, r1, #12
 8001096:	4e3d      	ldr	r6, [pc, #244]	; (800118c <__aeabi_d2f+0x100>)
 8001098:	0a64      	lsrs	r4, r4, #9
 800109a:	0f40      	lsrs	r0, r0, #29
 800109c:	1c5f      	adds	r7, r3, #1
 800109e:	0fc9      	lsrs	r1, r1, #31
 80010a0:	4304      	orrs	r4, r0
 80010a2:	00d5      	lsls	r5, r2, #3
 80010a4:	4237      	tst	r7, r6
 80010a6:	d00a      	beq.n	80010be <__aeabi_d2f+0x32>
 80010a8:	4839      	ldr	r0, [pc, #228]	; (8001190 <__aeabi_d2f+0x104>)
 80010aa:	181e      	adds	r6, r3, r0
 80010ac:	2efe      	cmp	r6, #254	; 0xfe
 80010ae:	dd16      	ble.n	80010de <__aeabi_d2f+0x52>
 80010b0:	20ff      	movs	r0, #255	; 0xff
 80010b2:	2400      	movs	r4, #0
 80010b4:	05c0      	lsls	r0, r0, #23
 80010b6:	4320      	orrs	r0, r4
 80010b8:	07c9      	lsls	r1, r1, #31
 80010ba:	4308      	orrs	r0, r1
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <__aeabi_d2f+0x44>
 80010c2:	432c      	orrs	r4, r5
 80010c4:	d026      	beq.n	8001114 <__aeabi_d2f+0x88>
 80010c6:	2205      	movs	r2, #5
 80010c8:	0192      	lsls	r2, r2, #6
 80010ca:	0a54      	lsrs	r4, r2, #9
 80010cc:	b2d8      	uxtb	r0, r3
 80010ce:	e7f1      	b.n	80010b4 <__aeabi_d2f+0x28>
 80010d0:	4325      	orrs	r5, r4
 80010d2:	d0ed      	beq.n	80010b0 <__aeabi_d2f+0x24>
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	03c0      	lsls	r0, r0, #15
 80010d8:	4304      	orrs	r4, r0
 80010da:	20ff      	movs	r0, #255	; 0xff
 80010dc:	e7ea      	b.n	80010b4 <__aeabi_d2f+0x28>
 80010de:	2e00      	cmp	r6, #0
 80010e0:	dd1b      	ble.n	800111a <__aeabi_d2f+0x8e>
 80010e2:	0192      	lsls	r2, r2, #6
 80010e4:	1e53      	subs	r3, r2, #1
 80010e6:	419a      	sbcs	r2, r3
 80010e8:	00e4      	lsls	r4, r4, #3
 80010ea:	0f6d      	lsrs	r5, r5, #29
 80010ec:	4322      	orrs	r2, r4
 80010ee:	432a      	orrs	r2, r5
 80010f0:	0753      	lsls	r3, r2, #29
 80010f2:	d048      	beq.n	8001186 <__aeabi_d2f+0xfa>
 80010f4:	230f      	movs	r3, #15
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d000      	beq.n	80010fe <__aeabi_d2f+0x72>
 80010fc:	3204      	adds	r2, #4
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	04db      	lsls	r3, r3, #19
 8001102:	4013      	ands	r3, r2
 8001104:	d03f      	beq.n	8001186 <__aeabi_d2f+0xfa>
 8001106:	1c70      	adds	r0, r6, #1
 8001108:	2efe      	cmp	r6, #254	; 0xfe
 800110a:	d0d1      	beq.n	80010b0 <__aeabi_d2f+0x24>
 800110c:	0192      	lsls	r2, r2, #6
 800110e:	0a54      	lsrs	r4, r2, #9
 8001110:	b2c0      	uxtb	r0, r0
 8001112:	e7cf      	b.n	80010b4 <__aeabi_d2f+0x28>
 8001114:	2000      	movs	r0, #0
 8001116:	2400      	movs	r4, #0
 8001118:	e7cc      	b.n	80010b4 <__aeabi_d2f+0x28>
 800111a:	0032      	movs	r2, r6
 800111c:	3217      	adds	r2, #23
 800111e:	db22      	blt.n	8001166 <__aeabi_d2f+0xda>
 8001120:	2080      	movs	r0, #128	; 0x80
 8001122:	0400      	lsls	r0, r0, #16
 8001124:	4320      	orrs	r0, r4
 8001126:	241e      	movs	r4, #30
 8001128:	1ba4      	subs	r4, r4, r6
 800112a:	2c1f      	cmp	r4, #31
 800112c:	dd1d      	ble.n	800116a <__aeabi_d2f+0xde>
 800112e:	2202      	movs	r2, #2
 8001130:	4252      	negs	r2, r2
 8001132:	1b96      	subs	r6, r2, r6
 8001134:	0002      	movs	r2, r0
 8001136:	40f2      	lsrs	r2, r6
 8001138:	0016      	movs	r6, r2
 800113a:	2c20      	cmp	r4, #32
 800113c:	d004      	beq.n	8001148 <__aeabi_d2f+0xbc>
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <__aeabi_d2f+0x108>)
 8001140:	4694      	mov	ip, r2
 8001142:	4463      	add	r3, ip
 8001144:	4098      	lsls	r0, r3
 8001146:	4305      	orrs	r5, r0
 8001148:	002a      	movs	r2, r5
 800114a:	1e53      	subs	r3, r2, #1
 800114c:	419a      	sbcs	r2, r3
 800114e:	4332      	orrs	r2, r6
 8001150:	2600      	movs	r6, #0
 8001152:	0753      	lsls	r3, r2, #29
 8001154:	d1ce      	bne.n	80010f4 <__aeabi_d2f+0x68>
 8001156:	2480      	movs	r4, #128	; 0x80
 8001158:	0013      	movs	r3, r2
 800115a:	04e4      	lsls	r4, r4, #19
 800115c:	2001      	movs	r0, #1
 800115e:	4023      	ands	r3, r4
 8001160:	4222      	tst	r2, r4
 8001162:	d1d3      	bne.n	800110c <__aeabi_d2f+0x80>
 8001164:	e7b0      	b.n	80010c8 <__aeabi_d2f+0x3c>
 8001166:	2300      	movs	r3, #0
 8001168:	e7ad      	b.n	80010c6 <__aeabi_d2f+0x3a>
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <__aeabi_d2f+0x10c>)
 800116c:	4694      	mov	ip, r2
 800116e:	002a      	movs	r2, r5
 8001170:	40e2      	lsrs	r2, r4
 8001172:	0014      	movs	r4, r2
 8001174:	002a      	movs	r2, r5
 8001176:	4463      	add	r3, ip
 8001178:	409a      	lsls	r2, r3
 800117a:	4098      	lsls	r0, r3
 800117c:	1e55      	subs	r5, r2, #1
 800117e:	41aa      	sbcs	r2, r5
 8001180:	4302      	orrs	r2, r0
 8001182:	4322      	orrs	r2, r4
 8001184:	e7e4      	b.n	8001150 <__aeabi_d2f+0xc4>
 8001186:	0033      	movs	r3, r6
 8001188:	e79e      	b.n	80010c8 <__aeabi_d2f+0x3c>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007fe 	.word	0x000007fe
 8001190:	fffffc80 	.word	0xfffffc80
 8001194:	fffffca2 	.word	0xfffffca2
 8001198:	fffffc82 	.word	0xfffffc82

0800119c <__clzsi2>:
 800119c:	211c      	movs	r1, #28
 800119e:	2301      	movs	r3, #1
 80011a0:	041b      	lsls	r3, r3, #16
 80011a2:	4298      	cmp	r0, r3
 80011a4:	d301      	bcc.n	80011aa <__clzsi2+0xe>
 80011a6:	0c00      	lsrs	r0, r0, #16
 80011a8:	3910      	subs	r1, #16
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	4298      	cmp	r0, r3
 80011ae:	d301      	bcc.n	80011b4 <__clzsi2+0x18>
 80011b0:	0a00      	lsrs	r0, r0, #8
 80011b2:	3908      	subs	r1, #8
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	4298      	cmp	r0, r3
 80011b8:	d301      	bcc.n	80011be <__clzsi2+0x22>
 80011ba:	0900      	lsrs	r0, r0, #4
 80011bc:	3904      	subs	r1, #4
 80011be:	a202      	add	r2, pc, #8	; (adr r2, 80011c8 <__clzsi2+0x2c>)
 80011c0:	5c10      	ldrb	r0, [r2, r0]
 80011c2:	1840      	adds	r0, r0, r1
 80011c4:	4770      	bx	lr
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	02020304 	.word	0x02020304
 80011cc:	01010101 	.word	0x01010101
	...

080011d8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*********************************** aht10 FUNCTIONS ****************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM16)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d102      	bne.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0x18>
 {
	/* Set every 100ms */
	T_100ms = 255;
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	701a      	strb	r2, [r3, #0]
 }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40014400 	.word	0x40014400
 80011fc:	20000003 	.word	0x20000003

08001200 <AHT10_GET>:

void AHT10_GET()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	if(T_100ms)
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <AHT10_GET+0x10c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d100      	bne.n	800120e <AHT10_GET+0xe>
 800120c:	e07b      	b.n	8001306 <AHT10_GET+0x106>
		  	{
		  		if(AHT10_Switcher)
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <AHT10_GET+0x110>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <AHT10_GET+0x24>
		  			{
		  				HAL_I2C_Master_Transmit_IT(&hi2c1, AHT10_ADRESS, (uint8_t*)AHT10_TmpHum_Cmd, 3); /* Send command (trigger measuremetns) + parameters */
 8001216:	4a3f      	ldr	r2, [pc, #252]	; (8001314 <AHT10_GET+0x114>)
 8001218:	483f      	ldr	r0, [pc, #252]	; (8001318 <AHT10_GET+0x118>)
 800121a:	2303      	movs	r3, #3
 800121c:	2170      	movs	r1, #112	; 0x70
 800121e:	f000 feb7 	bl	8001f90 <HAL_I2C_Master_Transmit_IT>
 8001222:	e005      	b.n	8001230 <AHT10_GET+0x30>
		  			}
		  		else
		  			{
		  				HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADRESS, (uint8_t*)AHT10_RX_Data, 6); /* Receive data: STATUS[1]:HIMIDITY[2.5]:TEMPERATURE[2.5] */
 8001224:	4a3d      	ldr	r2, [pc, #244]	; (800131c <AHT10_GET+0x11c>)
 8001226:	483c      	ldr	r0, [pc, #240]	; (8001318 <AHT10_GET+0x118>)
 8001228:	2306      	movs	r3, #6
 800122a:	2170      	movs	r1, #112	; 0x70
 800122c:	f000 ff2c 	bl	8002088 <HAL_I2C_Master_Receive_IT>
		  			}

		  		if(~AHT10_RX_Data[0] & 0x80)
 8001230:	4b3a      	ldr	r3, [pc, #232]	; (800131c <AHT10_GET+0x11c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	db56      	blt.n	80012e8 <AHT10_GET+0xe8>
		  		{
		  			/* Convert to Temperature in °C */
		  			AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 800123a:	4b38      	ldr	r3, [pc, #224]	; (800131c <AHT10_GET+0x11c>)
 800123c:	78db      	ldrb	r3, [r3, #3]
 800123e:	041a      	lsls	r2, r3, #16
 8001240:	23f0      	movs	r3, #240	; 0xf0
 8001242:	031b      	lsls	r3, r3, #12
 8001244:	401a      	ands	r2, r3
 8001246:	4b35      	ldr	r3, [pc, #212]	; (800131c <AHT10_GET+0x11c>)
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	4a33      	ldr	r2, [pc, #204]	; (800131c <AHT10_GET+0x11c>)
 8001250:	7952      	ldrb	r2, [r2, #5]
 8001252:	431a      	orrs	r2, r3
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <AHT10_GET+0x120>)
 8001256:	601a      	str	r2, [r3, #0]
		  			AHT10_Temperature = (float)(AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <AHT10_GET+0x120>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff feef 	bl	8001040 <__aeabi_ui2d>
 8001262:	2200      	movs	r2, #0
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <AHT10_GET+0x124>)
 8001266:	f7ff fc7f 	bl	8000b68 <__aeabi_dmul>
 800126a:	0002      	movs	r2, r0
 800126c:	000b      	movs	r3, r1
 800126e:	0010      	movs	r0, r2
 8001270:	0019      	movs	r1, r3
 8001272:	2200      	movs	r2, #0
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <AHT10_GET+0x128>)
 8001276:	f7ff f981 	bl	800057c <__aeabi_ddiv>
 800127a:	0002      	movs	r2, r0
 800127c:	000b      	movs	r3, r1
 800127e:	0010      	movs	r0, r2
 8001280:	0019      	movs	r1, r3
 8001282:	f7ff ff03 	bl	800108c <__aeabi_d2f>
 8001286:	1c03      	adds	r3, r0, #0
 8001288:	4928      	ldr	r1, [pc, #160]	; (800132c <AHT10_GET+0x12c>)
 800128a:	1c18      	adds	r0, r3, #0
 800128c:	f7fe ffc8 	bl	8000220 <__aeabi_fsub>
 8001290:	1c03      	adds	r3, r0, #0
 8001292:	1c1a      	adds	r2, r3, #0
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <AHT10_GET+0x130>)
 8001296:	601a      	str	r2, [r3, #0]

		  			/* Convert to Relative Humidity in % */
		  			AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <AHT10_GET+0x11c>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	031a      	lsls	r2, r3, #12
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <AHT10_GET+0x11c>)
 80012a0:	789b      	ldrb	r3, [r3, #2]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4313      	orrs	r3, r2
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <AHT10_GET+0x11c>)
 80012a8:	78d2      	ldrb	r2, [r2, #3]
 80012aa:	0912      	lsrs	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	431a      	orrs	r2, r3
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <AHT10_GET+0x120>)
 80012b2:	601a      	str	r2, [r3, #0]
		  			AHT10_Humidity = (float)(AHT10_ADC_Raw*100.00/1048576.00);
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <AHT10_GET+0x120>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fec1 	bl	8001040 <__aeabi_ui2d>
 80012be:	2200      	movs	r2, #0
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <AHT10_GET+0x134>)
 80012c2:	f7ff fc51 	bl	8000b68 <__aeabi_dmul>
 80012c6:	0002      	movs	r2, r0
 80012c8:	000b      	movs	r3, r1
 80012ca:	0010      	movs	r0, r2
 80012cc:	0019      	movs	r1, r3
 80012ce:	2200      	movs	r2, #0
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <AHT10_GET+0x128>)
 80012d2:	f7ff f953 	bl	800057c <__aeabi_ddiv>
 80012d6:	0002      	movs	r2, r0
 80012d8:	000b      	movs	r3, r1
 80012da:	0010      	movs	r0, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	f7ff fed5 	bl	800108c <__aeabi_d2f>
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <AHT10_GET+0x138>)
 80012e6:	601a      	str	r2, [r3, #0]
		  		}

		  		AHT10_Switcher = ~AHT10_Switcher; /* Invert */
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <AHT10_GET+0x110>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <AHT10_GET+0x110>)
 80012f2:	701a      	strb	r2, [r3, #0]
		  		GPIOB->ODR ^= GPIO_ODR_0; /* Green LED */
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <AHT10_GET+0x13c>)
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <AHT10_GET+0x13c>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	404a      	eors	r2, r1
 80012fe:	615a      	str	r2, [r3, #20]
		  		T_100ms = 0; /* Nulify */
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <AHT10_GET+0x10c>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
		  	}
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000003 	.word	0x20000003
 8001310:	20000004 	.word	0x20000004
 8001314:	20000000 	.word	0x20000000
 8001318:	20000030 	.word	0x20000030
 800131c:	200000cc 	.word	0x200000cc
 8001320:	200000d4 	.word	0x200000d4
 8001324:	40690000 	.word	0x40690000
 8001328:	41300000 	.word	0x41300000
 800132c:	42480000 	.word	0x42480000
 8001330:	200000d8 	.word	0x200000d8
 8001334:	40590000 	.word	0x40590000
 8001338:	200000dc 	.word	0x200000dc
 800133c:	48000400 	.word	0x48000400

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f000 fa6c 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f810 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 f8e0 	bl	8001510 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001350:	f000 f874 	bl	800143c <MX_I2C1_Init>
  MX_TIM16_Init();
 8001354:	f000 f8b2 	bl	80014bc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <main+0x28>)
 800135a:	0018      	movs	r0, r3
 800135c:	f003 f9bc 	bl	80046d8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  AHT10_GET();
 8001360:	f7ff ff4e 	bl	8001200 <AHT10_GET>
 8001364:	e7fc      	b.n	8001360 <main+0x20>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000084 	.word	0x20000084

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b095      	sub	sp, #84	; 0x54
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	2420      	movs	r4, #32
 8001374:	193b      	adds	r3, r7, r4
 8001376:	0018      	movs	r0, r3
 8001378:	2330      	movs	r3, #48	; 0x30
 800137a:	001a      	movs	r2, r3
 800137c:	2100      	movs	r1, #0
 800137e:	f003 fbc7 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001382:	2310      	movs	r3, #16
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	0018      	movs	r0, r3
 8001388:	2310      	movs	r3, #16
 800138a:	001a      	movs	r2, r3
 800138c:	2100      	movs	r1, #0
 800138e:	f003 fbbf 	bl	8004b10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001392:	003b      	movs	r3, r7
 8001394:	0018      	movs	r0, r3
 8001396:	2310      	movs	r3, #16
 8001398:	001a      	movs	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	f003 fbb8 	bl	8004b10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013a0:	0021      	movs	r1, r4
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2203      	movs	r2, #3
 80013a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2201      	movs	r2, #1
 80013ac:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2201      	movs	r2, #1
 80013b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	2210      	movs	r2, #16
 80013b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2202      	movs	r2, #2
 80013be:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2280      	movs	r2, #128	; 0x80
 80013c4:	0252      	lsls	r2, r2, #9
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	0352      	lsls	r2, r2, #13
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	0018      	movs	r0, r3
 80013da:	f002 fbf9 	bl	8003bd0 <HAL_RCC_OscConfig>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013e2:	f000 f907 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	2110      	movs	r1, #16
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2207      	movs	r2, #7
 80013ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2202      	movs	r2, #2
 80013f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2101      	movs	r1, #1
 8001404:	0018      	movs	r0, r3
 8001406:	f002 fefd 	bl	8004204 <HAL_RCC_ClockConfig>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800140e:	f000 f8f1 	bl	80015f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001412:	003b      	movs	r3, r7
 8001414:	2220      	movs	r2, #32
 8001416:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001418:	003b      	movs	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	003b      	movs	r3, r7
 8001420:	0018      	movs	r0, r3
 8001422:	f003 f83b 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800142a:	f000 f8e3 	bl	80015f4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800142e:	f002 ffb7 	bl	80043a0 <HAL_RCC_EnableCSS>
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b015      	add	sp, #84	; 0x54
 8001438:	bd90      	pop	{r4, r7, pc}
	...

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_I2C1_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <MX_I2C1_Init+0x7c>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001478:	0018      	movs	r0, r3
 800147a:	f000 fcf3 	bl	8001e64 <HAL_I2C_Init>
 800147e:	1e03      	subs	r3, r0, #0
 8001480:	d001      	beq.n	8001486 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001482:	f000 f8b7 	bl	80015f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_I2C1_Init+0x74>)
 8001488:	2100      	movs	r1, #0
 800148a:	0018      	movs	r0, r3
 800148c:	f002 fb08 	bl	8003aa0 <HAL_I2CEx_ConfigAnalogFilter>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001494:	f000 f8ae 	bl	80015f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <MX_I2C1_Init+0x74>)
 800149a:	2100      	movs	r1, #0
 800149c:	0018      	movs	r0, r3
 800149e:	f002 fb4b 	bl	8003b38 <HAL_I2CEx_ConfigDigitalFilter>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 f8a5 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000030 	.word	0x20000030
 80014b4:	40005400 	.word	0x40005400
 80014b8:	2000090e 	.word	0x2000090e

080014bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_TIM16_Init+0x44>)
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <MX_TIM16_Init+0x48>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4800-1;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_TIM16_Init+0x44>)
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_TIM16_Init+0x4c>)
 80014ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_TIM16_Init+0x44>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_TIM16_Init+0x44>)
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <MX_TIM16_Init+0x50>)
 80014d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_TIM16_Init+0x44>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_TIM16_Init+0x44>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_TIM16_Init+0x44>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <MX_TIM16_Init+0x44>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f003 f8a3 	bl	8004638 <HAL_TIM_Base_Init>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80014f6:	f000 f87d 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000084 	.word	0x20000084
 8001504:	40014400 	.word	0x40014400
 8001508:	000012bf 	.word	0x000012bf
 800150c:	000003e7 	.word	0x000003e7

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	240c      	movs	r4, #12
 8001518:	193b      	adds	r3, r7, r4
 800151a:	0018      	movs	r0, r3
 800151c:	2314      	movs	r3, #20
 800151e:	001a      	movs	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f003 faf5 	bl	8004b10 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <MX_GPIO_Init+0xdc>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	03c9      	lsls	r1, r1, #15
 8001530:	430a      	orrs	r2, r1
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	02c9      	lsls	r1, r1, #11
 800154c:	430a      	orrs	r2, r1
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	02db      	lsls	r3, r3, #11
 8001558:	4013      	ands	r3, r2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b22      	ldr	r3, [pc, #136]	; (80015ec <MX_GPIO_Init+0xdc>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0289      	lsls	r1, r1, #10
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <MX_GPIO_Init+0xdc>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	029b      	lsls	r3, r3, #10
 8001574:	4013      	ands	r3, r2
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_GPIO_Init+0xe0>)
 800157c:	2200      	movs	r2, #0
 800157e:	2101      	movs	r1, #1
 8001580:	0018      	movs	r0, r3
 8001582:	f000 fc51 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	0219      	lsls	r1, r3, #8
 800158a:	2390      	movs	r3, #144	; 0x90
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	2200      	movs	r2, #0
 8001590:	0018      	movs	r0, r3
 8001592:	f000 fc49 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001596:	193b      	adds	r3, r7, r4
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	193b      	adds	r3, r7, r4
 800159e:	2201      	movs	r2, #1
 80015a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <MX_GPIO_Init+0xe0>)
 80015b2:	0019      	movs	r1, r3
 80015b4:	0010      	movs	r0, r2
 80015b6:	f000 fac7 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015ba:	0021      	movs	r1, r4
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	0212      	lsls	r2, r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2201      	movs	r2, #1
 80015c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	187a      	adds	r2, r7, r1
 80015d8:	2390      	movs	r3, #144	; 0x90
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fab2 	bl	8001b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b009      	add	sp, #36	; 0x24
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <HAL_MspInit+0x44>)
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_MspInit+0x44>)
 800160c:	2101      	movs	r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_MspInit+0x44>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2201      	movs	r2, #1
 8001618:	4013      	ands	r3, r2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_MspInit+0x44>)
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_MspInit+0x44>)
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	0549      	lsls	r1, r1, #21
 8001628:	430a      	orrs	r2, r1
 800162a:	61da      	str	r2, [r3, #28]
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_MspInit+0x44>)
 800162e:	69da      	ldr	r2, [r3, #28]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	055b      	lsls	r3, r3, #21
 8001634:	4013      	ands	r3, r2
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b08b      	sub	sp, #44	; 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	2414      	movs	r4, #20
 8001652:	193b      	adds	r3, r7, r4
 8001654:	0018      	movs	r0, r3
 8001656:	2314      	movs	r3, #20
 8001658:	001a      	movs	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	f003 fa58 	bl	8004b10 <memset>
  if(hi2c->Instance==I2C1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <HAL_I2C_MspInit+0xa0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d139      	bne.n	80016de <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_I2C_MspInit+0xa4>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <HAL_I2C_MspInit+0xa4>)
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	02c9      	lsls	r1, r1, #11
 8001674:	430a      	orrs	r2, r1
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_I2C_MspInit+0xa4>)
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	02db      	lsls	r3, r3, #11
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	22c0      	movs	r2, #192	; 0xc0
 800168c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2212      	movs	r2, #18
 8001692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	2203      	movs	r2, #3
 800169e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2201      	movs	r2, #1
 80016a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_I2C_MspInit+0xa8>)
 80016aa:	0019      	movs	r1, r3
 80016ac:	0010      	movs	r0, r2
 80016ae:	f000 fa4b 	bl	8001b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_I2C_MspInit+0xa4>)
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_I2C_MspInit+0xa4>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0389      	lsls	r1, r1, #14
 80016bc:	430a      	orrs	r2, r1
 80016be:	61da      	str	r2, [r3, #28]
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_I2C_MspInit+0xa4>)
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	039b      	lsls	r3, r3, #14
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2017      	movs	r0, #23
 80016d4:	f000 f9b4 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80016d8:	2017      	movs	r0, #23
 80016da:	f000 f9c6 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b00b      	add	sp, #44	; 0x2c
 80016e4:	bd90      	pop	{r4, r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000400 	.word	0x48000400

080016f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_TIM_Base_MspInit+0x48>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d115      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_TIM_Base_MspInit+0x4c>)
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_TIM_Base_MspInit+0x4c>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	0289      	lsls	r1, r1, #10
 8001710:	430a      	orrs	r2, r1
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_TIM_Base_MspInit+0x4c>)
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2015      	movs	r0, #21
 8001728:	f000 f98a 	bl	8001a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800172c:	2015      	movs	r0, #21
 800172e:	f000 f99c 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40014400 	.word	0x40014400
 8001740:	40021000 	.word	0x40021000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001748:	f002 fe8e 	bl	8004468 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x8>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f8a0 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <TIM16_IRQHandler+0x14>)
 800177e:	0018      	movs	r0, r3
 8001780:	f002 fff0 	bl	8004764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	20000084 	.word	0x20000084

08001790 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <I2C1_IRQHandler+0x2c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	23e0      	movs	r3, #224	; 0xe0
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4013      	ands	r3, r2
 80017a0:	d004      	beq.n	80017ac <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <I2C1_IRQHandler+0x2c>)
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 fd05 	bl	80021b4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80017aa:	e003      	b.n	80017b4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <I2C1_IRQHandler+0x2c>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fce6 	bl	8002180 <HAL_I2C_EV_IRQHandler>
}
 80017b4:	46c0      	nop			; (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	20000030 	.word	0x20000030

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d0:	f7ff fff6 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <LoopForever+0x6>)
  ldr r1, =_edata
 80017d6:	490d      	ldr	r1, [pc, #52]	; (800180c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <LoopForever+0xe>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <LoopForever+0x16>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017fa:	f003 f965 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017fe:	f7ff fd9f 	bl	8001340 <main>

08001802 <LoopForever>:

LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
  ldr   r0, =_estack
 8001804:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001810:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 8001814:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001818:	200000e4 	.word	0x200000e4

0800181c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_IRQHandler>
	...

08001820 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <HAL_Init+0x24>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_Init+0x24>)
 800182a:	2110      	movs	r1, #16
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f809 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001836:	f7ff fee3 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_InitTick+0x5c>)
 8001852:	681c      	ldr	r4, [r3, #0]
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_InitTick+0x60>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	0019      	movs	r1, r3
 800185a:	23fa      	movs	r3, #250	; 0xfa
 800185c:	0098      	lsls	r0, r3, #2
 800185e:	f7fe fc53 	bl	8000108 <__udivsi3>
 8001862:	0003      	movs	r3, r0
 8001864:	0019      	movs	r1, r3
 8001866:	0020      	movs	r0, r4
 8001868:	f7fe fc4e 	bl	8000108 <__udivsi3>
 800186c:	0003      	movs	r3, r0
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f90b 	bl	8001a8a <HAL_SYSTICK_Config>
 8001874:	1e03      	subs	r3, r0, #0
 8001876:	d001      	beq.n	800187c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e00f      	b.n	800189c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d80b      	bhi.n	800189a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	2301      	movs	r3, #1
 8001886:	425b      	negs	r3, r3
 8001888:	2200      	movs	r2, #0
 800188a:	0018      	movs	r0, r3
 800188c:	f000 f8d8 	bl	8001a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_InitTick+0x64>)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	0018      	movs	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	b003      	add	sp, #12
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	20000008 	.word	0x20000008
 80018a8:	20000010 	.word	0x20000010
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x1c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	001a      	movs	r2, r3
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_IncTick+0x20>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	18d2      	adds	r2, r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_IncTick+0x20>)
 80018c2:	601a      	str	r2, [r3, #0]
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	20000010 	.word	0x20000010
 80018d0:	200000e0 	.word	0x200000e0

080018d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <HAL_GetTick+0x10>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	200000e0 	.word	0x200000e0

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	0002      	movs	r2, r0
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	1dfb      	adds	r3, r7, #7
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7f      	cmp	r3, #127	; 0x7f
 80018fa:	d809      	bhi.n	8001910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	001a      	movs	r2, r3
 8001902:	231f      	movs	r3, #31
 8001904:	401a      	ands	r2, r3
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_EnableIRQ+0x30>)
 8001908:	2101      	movs	r1, #1
 800190a:	4091      	lsls	r1, r2
 800190c:	000a      	movs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
  }
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	0002      	movs	r2, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800192a:	1dfb      	adds	r3, r7, #7
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b7f      	cmp	r3, #127	; 0x7f
 8001930:	d828      	bhi.n	8001984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001932:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <__NVIC_SetPriority+0xd4>)
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b25b      	sxtb	r3, r3
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	33c0      	adds	r3, #192	; 0xc0
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	589b      	ldr	r3, [r3, r2]
 8001942:	1dfa      	adds	r2, r7, #7
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	0011      	movs	r1, r2
 8001948:	2203      	movs	r2, #3
 800194a:	400a      	ands	r2, r1
 800194c:	00d2      	lsls	r2, r2, #3
 800194e:	21ff      	movs	r1, #255	; 0xff
 8001950:	4091      	lsls	r1, r2
 8001952:	000a      	movs	r2, r1
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	22ff      	movs	r2, #255	; 0xff
 8001960:	401a      	ands	r2, r3
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	0018      	movs	r0, r3
 8001968:	2303      	movs	r3, #3
 800196a:	4003      	ands	r3, r0
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	481f      	ldr	r0, [pc, #124]	; (80019f0 <__NVIC_SetPriority+0xd4>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b25b      	sxtb	r3, r3
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	430a      	orrs	r2, r1
 800197c:	33c0      	adds	r3, #192	; 0xc0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001982:	e031      	b.n	80019e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <__NVIC_SetPriority+0xd8>)
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	0019      	movs	r1, r3
 800198c:	230f      	movs	r3, #15
 800198e:	400b      	ands	r3, r1
 8001990:	3b08      	subs	r3, #8
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3306      	adds	r3, #6
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	18d3      	adds	r3, r2, r3
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1dfa      	adds	r2, r7, #7
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	0011      	movs	r1, r2
 80019a4:	2203      	movs	r2, #3
 80019a6:	400a      	ands	r2, r1
 80019a8:	00d2      	lsls	r2, r2, #3
 80019aa:	21ff      	movs	r1, #255	; 0xff
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	43d2      	mvns	r2, r2
 80019b2:	401a      	ands	r2, r3
 80019b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	019b      	lsls	r3, r3, #6
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	401a      	ands	r2, r3
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	0018      	movs	r0, r3
 80019c4:	2303      	movs	r3, #3
 80019c6:	4003      	ands	r3, r0
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <__NVIC_SetPriority+0xd8>)
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	001c      	movs	r4, r3
 80019d4:	230f      	movs	r3, #15
 80019d6:	4023      	ands	r3, r4
 80019d8:	3b08      	subs	r3, #8
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	430a      	orrs	r2, r1
 80019de:	3306      	adds	r3, #6
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	18c3      	adds	r3, r0, r3
 80019e4:	3304      	adds	r3, #4
 80019e6:	601a      	str	r2, [r3, #0]
}
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b003      	add	sp, #12
 80019ee:	bd90      	pop	{r4, r7, pc}
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	1e5a      	subs	r2, r3, #1
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	045b      	lsls	r3, r3, #17
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d301      	bcc.n	8001a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e010      	b.n	8001a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <SysTick_Config+0x44>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	3a01      	subs	r2, #1
 8001a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	425b      	negs	r3, r3
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7ff ff7c 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x44>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x44>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff ff5d 	bl	800191c <__NVIC_SetPriority>
}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	0002      	movs	r2, r0
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff ff33 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff ffaf 	bl	80019f8 <SysTick_Config>
 8001a9a:	0003      	movs	r3, r0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aac:	210f      	movs	r1, #15
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d006      	beq.n	8001ace <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e028      	b.n	8001b20 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	210e      	movs	r1, #14
 8001ada:	438a      	bics	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	438a      	bics	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	2101      	movs	r1, #1
 8001af8:	4091      	lsls	r1, r2
 8001afa:	000a      	movs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2221      	movs	r2, #33	; 0x21
 8001b02:	2101      	movs	r1, #1
 8001b04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	0010      	movs	r0, r2
 8001b1e:	4798      	blx	r3
    }
  }
  return status;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2221      	movs	r2, #33	; 0x21
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	b2db      	uxtb	r3, r3
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b56:	e14f      	b.n	8001df8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4091      	lsls	r1, r2
 8001b62:	000a      	movs	r2, r1
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d100      	bne.n	8001b70 <HAL_GPIO_Init+0x28>
 8001b6e:	e140      	b.n	8001df2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d005      	beq.n	8001b88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d130      	bne.n	8001bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	409a      	lsls	r2, r3
 8001b96:	0013      	movs	r3, r2
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	0013      	movs	r3, r2
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2203      	movs	r2, #3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d017      	beq.n	8001c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	2203      	movs	r2, #3
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	43da      	mvns	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	58d3      	ldr	r3, [r2, r3]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2207      	movs	r2, #7
 8001c44:	4013      	ands	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2107      	movs	r1, #7
 8001c5e:	400b      	ands	r3, r1
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	409a      	lsls	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	6939      	ldr	r1, [r7, #16]
 8001c78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	401a      	ands	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	23c0      	movs	r3, #192	; 0xc0
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_GPIO_Init+0x174>
 8001cba:	e09a      	b.n	8001df2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <HAL_GPIO_Init+0x2c8>)
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_GPIO_Init+0x2c8>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	619a      	str	r2, [r3, #24]
 8001cc8:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x2c8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	589b      	ldr	r3, [r3, r2]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	409a      	lsls	r2, r3
 8001cee:	0013      	movs	r3, r2
 8001cf0:	43da      	mvns	r2, r3
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	2390      	movs	r3, #144	; 0x90
 8001cfc:	05db      	lsls	r3, r3, #23
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x1e2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a44      	ldr	r2, [pc, #272]	; (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1de>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a43      	ldr	r2, [pc, #268]	; (8001e1c <HAL_GPIO_Init+0x2d4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1da>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a42      	ldr	r2, [pc, #264]	; (8001e20 <HAL_GPIO_Init+0x2d8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1d6>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	2103      	movs	r1, #3
 8001d30:	400a      	ands	r2, r1
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	035b      	lsls	r3, r3, #13
 8001d62:	4013      	ands	r3, r2
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	039b      	lsls	r3, r3, #14
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	029b      	lsls	r3, r3, #10
 8001db6:	4013      	ands	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	4013      	ands	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_GPIO_Init+0x2dc>)
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	40da      	lsrs	r2, r3
 8001e00:	1e13      	subs	r3, r2, #0
 8001e02:	d000      	beq.n	8001e06 <HAL_GPIO_Init+0x2be>
 8001e04:	e6a8      	b.n	8001b58 <HAL_GPIO_Init+0x10>
  } 
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	48000800 	.word	0x48000800
 8001e20:	48000c00 	.word	0x48000c00
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	0008      	movs	r0, r1
 8001e32:	0011      	movs	r1, r2
 8001e34:	1cbb      	adds	r3, r7, #2
 8001e36:	1c02      	adds	r2, r0, #0
 8001e38:	801a      	strh	r2, [r3, #0]
 8001e3a:	1c7b      	adds	r3, r7, #1
 8001e3c:	1c0a      	adds	r2, r1, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e40:	1c7b      	adds	r3, r7, #1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e48:	1cbb      	adds	r3, r7, #2
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e50:	e003      	b.n	8001e5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e52:	1cbb      	adds	r3, r7, #2
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e082      	b.n	8001f7c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2241      	movs	r2, #65	; 0x41
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d107      	bne.n	8001e92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2240      	movs	r2, #64	; 0x40
 8001e86:	2100      	movs	r1, #0
 8001e88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff fbdb 	bl	8001648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2241      	movs	r2, #65	; 0x41
 8001e96:	2124      	movs	r1, #36	; 0x24
 8001e98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4934      	ldr	r1, [pc, #208]	; (8001f84 <HAL_I2C_Init+0x120>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4931      	ldr	r1, [pc, #196]	; (8001f88 <HAL_I2C_Init+0x124>)
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2180      	movs	r1, #128	; 0x80
 8001eda:	0209      	lsls	r1, r1, #8
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e007      	b.n	8001ef2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2184      	movs	r1, #132	; 0x84
 8001eec:	0209      	lsls	r1, r1, #8
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d104      	bne.n	8001f04 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	491f      	ldr	r1, [pc, #124]	; (8001f8c <HAL_I2C_Init+0x128>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	491a      	ldr	r1, [pc, #104]	; (8001f88 <HAL_I2C_Init+0x124>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69d9      	ldr	r1, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2241      	movs	r2, #65	; 0x41
 8001f68:	2120      	movs	r1, #32
 8001f6a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2242      	movs	r2, #66	; 0x42
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	f0ffffff 	.word	0xf0ffffff
 8001f88:	ffff7fff 	.word	0xffff7fff
 8001f8c:	02008000 	.word	0x02008000

08001f90 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	0008      	movs	r0, r1
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	1c02      	adds	r2, r0, #0
 8001fa4:	801a      	strh	r2, [r3, #0]
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	1c0a      	adds	r2, r1, #0
 8001fac:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2241      	movs	r2, #65	; 0x41
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d15b      	bne.n	8002072 <HAL_I2C_Master_Transmit_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Master_Transmit_IT+0x42>
    {
      return HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e050      	b.n	8002074 <HAL_I2C_Master_Transmit_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	5c9b      	ldrb	r3, [r3, r2]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2C_Master_Transmit_IT+0x50>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e049      	b.n	8002074 <HAL_I2C_Master_Transmit_IT+0xe4>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2241      	movs	r2, #65	; 0x41
 8001fec:	2121      	movs	r1, #33	; 0x21
 8001fee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2242      	movs	r2, #66	; 0x42
 8001ff4:	2110      	movs	r1, #16
 8001ff6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2208      	movs	r2, #8
 8002008:	18ba      	adds	r2, r7, r2
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_I2C_Master_Transmit_IT+0xec>)
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_I2C_Master_Transmit_IT+0xf0>)
 8002018:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2bff      	cmp	r3, #255	; 0xff
 8002022:	d906      	bls.n	8002032 <HAL_I2C_Master_Transmit_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	22ff      	movs	r2, #255	; 0xff
 8002028:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	045b      	lsls	r3, r3, #17
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e007      	b.n	8002042 <HAL_I2C_Master_Transmit_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	049b      	lsls	r3, r3, #18
 8002040:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002046:	b2da      	uxtb	r2, r3
 8002048:	697c      	ldr	r4, [r7, #20]
 800204a:	230a      	movs	r3, #10
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	8819      	ldrh	r1, [r3, #0]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_I2C_Master_Transmit_IT+0xf4>)
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	0023      	movs	r3, r4
 8002058:	f001 fbf6 	bl	8003848 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2240      	movs	r2, #64	; 0x40
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2101      	movs	r1, #1
 8002068:	0018      	movs	r0, r3
 800206a:	f001 fc27 	bl	80038bc <I2C_Enable_IRQ>

    return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_I2C_Master_Transmit_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002072:	2302      	movs	r3, #2
  }
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b007      	add	sp, #28
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	ffff0000 	.word	0xffff0000
 8002080:	08002329 	.word	0x08002329
 8002084:	80002000 	.word	0x80002000

08002088 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	0008      	movs	r0, r1
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	0019      	movs	r1, r3
 8002096:	230a      	movs	r3, #10
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	1c02      	adds	r2, r0, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	2308      	movs	r3, #8
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	1c0a      	adds	r2, r1, #0
 80020a4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2241      	movs	r2, #65	; 0x41
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d15b      	bne.n	800216a <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	401a      	ands	r2, r3
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	e050      	b.n	800216c <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2C_Master_Receive_IT+0x50>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e049      	b.n	800216c <HAL_I2C_Master_Receive_IT+0xe4>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	2101      	movs	r1, #1
 80020de:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2241      	movs	r2, #65	; 0x41
 80020e4:	2122      	movs	r1, #34	; 0x22
 80020e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2242      	movs	r2, #66	; 0x42
 80020ec:	2110      	movs	r1, #16
 80020ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2208      	movs	r2, #8
 8002100:	18ba      	adds	r2, r7, r2
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4a1a      	ldr	r2, [pc, #104]	; (8002174 <HAL_I2C_Master_Receive_IT+0xec>)
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <HAL_I2C_Master_Receive_IT+0xf0>)
 8002110:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	2bff      	cmp	r3, #255	; 0xff
 800211a:	d906      	bls.n	800212a <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	22ff      	movs	r2, #255	; 0xff
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	045b      	lsls	r3, r3, #17
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e007      	b.n	800213a <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	049b      	lsls	r3, r3, #18
 8002138:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	b2da      	uxtb	r2, r3
 8002140:	697c      	ldr	r4, [r7, #20]
 8002142:	230a      	movs	r3, #10
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	8819      	ldrh	r1, [r3, #0]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_I2C_Master_Receive_IT+0xf4>)
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	0023      	movs	r3, r4
 8002150:	f001 fb7a 	bl	8003848 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	2100      	movs	r1, #0
 800215a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2102      	movs	r1, #2
 8002160:	0018      	movs	r0, r3
 8002162:	f001 fbab 	bl	80038bc <I2C_Enable_IRQ>

    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
  }
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b007      	add	sp, #28
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	ffff0000 	.word	0xffff0000
 8002178:	08002329 	.word	0x08002329
 800217c:	80002400 	.word	0x80002400

08002180 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
  }
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b004      	add	sp, #16
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	001a      	movs	r2, r3
 80021d2:	2301      	movs	r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d010      	beq.n	80021fa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	09db      	lsrs	r3, r3, #7
 80021dc:	001a      	movs	r2, r3
 80021de:	2301      	movs	r3, #1
 80021e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80021e2:	d00a      	beq.n	80021fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	2201      	movs	r2, #1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0052      	lsls	r2, r2, #1
 80021f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	0a9b      	lsrs	r3, r3, #10
 80021fe:	001a      	movs	r2, r3
 8002200:	2301      	movs	r3, #1
 8002202:	4013      	ands	r3, r2
 8002204:	d010      	beq.n	8002228 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	09db      	lsrs	r3, r3, #7
 800220a:	001a      	movs	r2, r3
 800220c:	2301      	movs	r3, #1
 800220e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002210:	d00a      	beq.n	8002228 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	2208      	movs	r2, #8
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	00d2      	lsls	r2, r2, #3
 8002226:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	001a      	movs	r2, r3
 800222e:	2301      	movs	r3, #1
 8002230:	4013      	ands	r3, r2
 8002232:	d010      	beq.n	8002256 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	09db      	lsrs	r3, r3, #7
 8002238:	001a      	movs	r2, r3
 800223a:	2301      	movs	r3, #1
 800223c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800223e:	d00a      	beq.n	8002256 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	2202      	movs	r2, #2
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	220b      	movs	r2, #11
 8002260:	4013      	ands	r3, r2
 8002262:	d005      	beq.n	8002270 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f001 f980 	bl	8003570 <I2C_ITError>
  }
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b006      	add	sp, #24
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	0008      	movs	r0, r1
 80022c2:	0011      	movs	r1, r2
 80022c4:	1cfb      	adds	r3, r7, #3
 80022c6:	1c02      	adds	r2, r0, #0
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	003b      	movs	r3, r7
 80022cc:	1c0a      	adds	r2, r1, #0
 80022ce:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b002      	add	sp, #8
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <I2C_Master_ISR_IT+0x1e>
 8002342:	2302      	movs	r3, #2
 8002344:	e12b      	b.n	800259e <I2C_Master_ISR_IT+0x276>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2240      	movs	r2, #64	; 0x40
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	001a      	movs	r2, r3
 8002354:	2301      	movs	r3, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d014      	beq.n	8002384 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	001a      	movs	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002364:	d00e      	beq.n	8002384 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2210      	movs	r2, #16
 800236c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	2204      	movs	r2, #4
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0018      	movs	r0, r3
 800237e:	f001 fa22 	bl	80037c6 <I2C_Flush_TXDR>
 8002382:	e0f5      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	001a      	movs	r2, r3
 800238a:	2301      	movs	r3, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d023      	beq.n	80023d8 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	001a      	movs	r2, r3
 8002396:	2301      	movs	r3, #1
 8002398:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800239a:	d01d      	beq.n	80023d8 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2204      	movs	r2, #4
 80023a0:	4393      	bics	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023d6:	e0cb      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	001a      	movs	r2, r3
 80023de:	2301      	movs	r3, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d01e      	beq.n	8002422 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	001a      	movs	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023ee:	d018      	beq.n	8002422 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002420:	e0a6      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	09db      	lsrs	r3, r3, #7
 8002426:	001a      	movs	r2, r3
 8002428:	2301      	movs	r3, #1
 800242a:	4013      	ands	r3, r2
 800242c:	d100      	bne.n	8002430 <I2C_Master_ISR_IT+0x108>
 800242e:	e06b      	b.n	8002508 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	001a      	movs	r2, r3
 8002436:	2301      	movs	r3, #1
 8002438:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800243a:	d065      	beq.n	8002508 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04a      	beq.n	80024dc <I2C_Master_ISR_IT+0x1b4>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	2b00      	cmp	r3, #0
 800244c:	d146      	bne.n	80024dc <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	b29a      	uxth	r2, r3
 8002456:	2112      	movs	r1, #18
 8002458:	187b      	adds	r3, r7, r1
 800245a:	0592      	lsls	r2, r2, #22
 800245c:	0d92      	lsrs	r2, r2, #22
 800245e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2bff      	cmp	r3, #255	; 0xff
 8002468:	d910      	bls.n	800248c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	b2da      	uxtb	r2, r3
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	045c      	lsls	r4, r3, #17
 800247a:	187b      	adds	r3, r7, r1
 800247c:	8819      	ldrh	r1, [r3, #0]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	0023      	movs	r3, r4
 8002486:	f001 f9df 	bl	8003848 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248a:	e03c      	b.n	8002506 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	4a43      	ldr	r2, [pc, #268]	; (80025a8 <I2C_Master_ISR_IT+0x280>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00e      	beq.n	80024be <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80024aa:	2312      	movs	r3, #18
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	8819      	ldrh	r1, [r3, #0]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	0023      	movs	r3, r4
 80024b8:	f001 f9c6 	bl	8003848 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024bc:	e023      	b.n	8002506 <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	049c      	lsls	r4, r3, #18
 80024c8:	2312      	movs	r3, #18
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	8819      	ldrh	r1, [r3, #0]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	0023      	movs	r3, r4
 80024d6:	f001 f9b7 	bl	8003848 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024da:	e014      	b.n	8002506 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	049b      	lsls	r3, r3, #18
 80024e6:	401a      	ands	r2, r3
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	049b      	lsls	r3, r3, #18
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d004      	beq.n	80024fa <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fd44 	bl	8002f80 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024f8:	e03a      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	0018      	movs	r0, r3
 8002500:	f001 f836 	bl	8003570 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002504:	e034      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
 8002506:	e033      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	001a      	movs	r2, r3
 800250e:	2301      	movs	r3, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d02d      	beq.n	8002570 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	001a      	movs	r2, r3
 800251a:	2301      	movs	r3, #1
 800251c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800251e:	d027      	beq.n	8002570 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11d      	bne.n	8002566 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	049b      	lsls	r3, r3, #18
 8002534:	401a      	ands	r2, r3
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	049b      	lsls	r3, r3, #18
 800253a:	429a      	cmp	r2, r3
 800253c:	d018      	beq.n	8002570 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	4a19      	ldr	r2, [pc, #100]	; (80025a8 <I2C_Master_ISR_IT+0x280>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d109      	bne.n	800255c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	01c9      	lsls	r1, r1, #7
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	e009      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 fd0e 	bl	8002f80 <I2C_ITMasterSeqCplt>
 8002564:	e004      	b.n	8002570 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	0018      	movs	r0, r3
 800256c:	f001 f800 	bl	8003570 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	001a      	movs	r2, r3
 8002576:	2301      	movs	r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d00b      	beq.n	8002594 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	001a      	movs	r2, r3
 8002582:	2301      	movs	r3, #1
 8002584:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002586:	d005      	beq.n	8002594 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0011      	movs	r1, r2
 800258e:	0018      	movs	r0, r3
 8002590:	f000 fd9e 	bl	80030d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b007      	add	sp, #28
 80025a4:	bd90      	pop	{r4, r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	ffff0000 	.word	0xffff0000

080025ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	5c9b      	ldrb	r3, [r3, r2]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <I2C_Slave_ISR_IT+0x24>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e0fa      	b.n	80027c6 <I2C_Slave_ISR_IT+0x21a>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	001a      	movs	r2, r3
 80025de:	2301      	movs	r3, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d00b      	beq.n	80025fc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	001a      	movs	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80025ee:	d005      	beq.n	80025fc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0011      	movs	r1, r2
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 fe3c 	bl	8003274 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	001a      	movs	r2, r3
 8002602:	2301      	movs	r3, #1
 8002604:	4013      	ands	r3, r2
 8002606:	d054      	beq.n	80026b2 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	001a      	movs	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002612:	d04e      	beq.n	80026b2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d12d      	bne.n	800267a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2241      	movs	r2, #65	; 0x41
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b28      	cmp	r3, #40	; 0x28
 8002628:	d10b      	bne.n	8002642 <I2C_Slave_ISR_IT+0x96>
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	049b      	lsls	r3, r3, #18
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	0011      	movs	r1, r2
 800263a:	0018      	movs	r0, r3
 800263c:	f000 ff3e 	bl	80034bc <I2C_ITListenCplt>
 8002640:	e036      	b.n	80026b0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2241      	movs	r2, #65	; 0x41
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b29      	cmp	r3, #41	; 0x29
 800264c:	d110      	bne.n	8002670 <I2C_Slave_ISR_IT+0xc4>
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	4a5f      	ldr	r2, [pc, #380]	; (80027d0 <I2C_Slave_ISR_IT+0x224>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00c      	beq.n	8002670 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2210      	movs	r2, #16
 800265c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0018      	movs	r0, r3
 8002662:	f001 f8b0 	bl	80037c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fccb 	bl	8003004 <I2C_ITSlaveSeqCplt>
 800266e:	e01f      	b.n	80026b0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2210      	movs	r2, #16
 8002676:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002678:	e09d      	b.n	80027b6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2210      	movs	r2, #16
 8002680:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	2204      	movs	r2, #4
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <I2C_Slave_ISR_IT+0xf4>
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	045b      	lsls	r3, r3, #17
 800269a:	429a      	cmp	r2, r3
 800269c:	d000      	beq.n	80026a0 <I2C_Slave_ISR_IT+0xf4>
 800269e:	e08a      	b.n	80027b6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 ff61 	bl	8003570 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026ae:	e082      	b.n	80027b6 <I2C_Slave_ISR_IT+0x20a>
 80026b0:	e081      	b.n	80027b6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	001a      	movs	r2, r3
 80026b8:	2301      	movs	r3, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d031      	beq.n	8002722 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	001a      	movs	r2, r3
 80026c4:	2301      	movs	r3, #1
 80026c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80026c8:	d02b      	beq.n	8002722 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d154      	bne.n	80027ba <I2C_Slave_ISR_IT+0x20e>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <I2C_Slave_ISR_IT+0x224>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d050      	beq.n	80027ba <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fc72 	bl	8003004 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002720:	e04b      	b.n	80027ba <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	001a      	movs	r2, r3
 8002728:	2301      	movs	r3, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d00c      	beq.n	8002748 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	001a      	movs	r2, r3
 8002734:	2301      	movs	r3, #1
 8002736:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002738:	d006      	beq.n	8002748 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fb79 	bl	8002e38 <I2C_ITAddrCplt>
 8002746:	e039      	b.n	80027bc <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	001a      	movs	r2, r3
 800274e:	2301      	movs	r3, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d033      	beq.n	80027bc <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	001a      	movs	r2, r3
 800275a:	2301      	movs	r3, #1
 800275c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800275e:	d02d      	beq.n	80027bc <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
 800279a:	e00f      	b.n	80027bc <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	045b      	lsls	r3, r3, #17
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d002      	beq.n	80027ac <I2C_Slave_ISR_IT+0x200>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fc28 	bl	8003004 <I2C_ITSlaveSeqCplt>
 80027b4:	e002      	b.n	80027bc <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	e000      	b.n	80027bc <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80027ba:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b006      	add	sp, #24
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	ffff0000 	.word	0xffff0000

080027d4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	5c9b      	ldrb	r3, [r3, r2]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <I2C_Master_ISR_DMA+0x1a>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0f7      	b.n	80029de <I2C_Master_ISR_DMA+0x20a>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2240      	movs	r2, #64	; 0x40
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	001a      	movs	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	d019      	beq.n	8002836 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	001a      	movs	r2, r3
 8002808:	2301      	movs	r3, #1
 800280a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800280c:	d013      	beq.n	8002836 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2210      	movs	r2, #16
 8002814:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	2204      	movs	r2, #4
 800281c:	431a      	orrs	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2120      	movs	r1, #32
 8002826:	0018      	movs	r0, r3
 8002828:	f001 f848 	bl	80038bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	0018      	movs	r0, r3
 8002830:	f000 ffc9 	bl	80037c6 <I2C_Flush_TXDR>
 8002834:	e0ce      	b.n	80029d4 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	09db      	lsrs	r3, r3, #7
 800283a:	001a      	movs	r2, r3
 800283c:	2301      	movs	r3, #1
 800283e:	4013      	ands	r3, r2
 8002840:	d100      	bne.n	8002844 <I2C_Master_ISR_DMA+0x70>
 8002842:	e07e      	b.n	8002942 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	001a      	movs	r2, r3
 800284a:	2301      	movs	r3, #1
 800284c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800284e:	d100      	bne.n	8002852 <I2C_Master_ISR_DMA+0x7e>
 8002850:	e077      	b.n	8002942 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	438a      	bics	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d055      	beq.n	8002918 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2312      	movs	r3, #18
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	0592      	lsls	r2, r2, #22
 800287a:	0d92      	lsrs	r2, r2, #22
 800287c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d906      	bls.n	8002896 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	045b      	lsls	r3, r3, #17
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e010      	b.n	80028b8 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <I2C_Master_ISR_DMA+0x214>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e002      	b.n	80028b8 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	049b      	lsls	r3, r3, #18
 80028b6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	697c      	ldr	r4, [r7, #20]
 80028c0:	2312      	movs	r3, #18
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	8819      	ldrh	r1, [r3, #0]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	0023      	movs	r3, r4
 80028ce:	f000 ffbb 	bl	8003848 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2241      	movs	r2, #65	; 0x41
 80028e8:	5c9b      	ldrb	r3, [r3, r2]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b22      	cmp	r3, #34	; 0x22
 80028ee:	d109      	bne.n	8002904 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	0209      	lsls	r1, r1, #8
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002902:	e067      	b.n	80029d4 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	01c9      	lsls	r1, r1, #7
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002916:	e05d      	b.n	80029d4 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	049b      	lsls	r3, r3, #18
 8002922:	401a      	ands	r2, r3
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	049b      	lsls	r3, r3, #18
 8002928:	429a      	cmp	r2, r3
 800292a:	d004      	beq.n	8002936 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fb26 	bl	8002f80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002934:	e04e      	b.n	80029d4 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	0018      	movs	r0, r3
 800293c:	f000 fe18 	bl	8003570 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002940:	e048      	b.n	80029d4 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	001a      	movs	r2, r3
 8002948:	2301      	movs	r3, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d02e      	beq.n	80029ac <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	001a      	movs	r2, r3
 8002954:	2301      	movs	r3, #1
 8002956:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002958:	d028      	beq.n	80029ac <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d11d      	bne.n	80029a0 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	049b      	lsls	r3, r3, #18
 800296e:	401a      	ands	r2, r3
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	049b      	lsls	r3, r3, #18
 8002974:	429a      	cmp	r2, r3
 8002976:	d02c      	beq.n	80029d2 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <I2C_Master_ISR_DMA+0x214>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d109      	bne.n	8002996 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	01c9      	lsls	r1, r1, #7
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002994:	e01d      	b.n	80029d2 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 faf1 	bl	8002f80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800299e:	e018      	b.n	80029d2 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2140      	movs	r1, #64	; 0x40
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 fde3 	bl	8003570 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029aa:	e012      	b.n	80029d2 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	001a      	movs	r2, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d00d      	beq.n	80029d4 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	001a      	movs	r2, r3
 80029be:	2301      	movs	r3, #1
 80029c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029c2:	d007      	beq.n	80029d4 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0011      	movs	r1, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fb80 	bl	80030d0 <I2C_ITMasterCplt>
 80029d0:	e000      	b.n	80029d4 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80029d2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	2100      	movs	r1, #0
 80029da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b007      	add	sp, #28
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	ffff0000 	.word	0xffff0000

080029ec <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <I2C_Mem_ISR_DMA+0x258>)
 80029fa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	5c9b      	ldrb	r3, [r3, r2]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <I2C_Mem_ISR_DMA+0x1e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e118      	b.n	8002c3c <I2C_Mem_ISR_DMA+0x250>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2240      	movs	r2, #64	; 0x40
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	001a      	movs	r2, r3
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	001a      	movs	r2, r3
 8002a24:	2301      	movs	r3, #1
 8002a26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a28:	d013      	beq.n	8002a52 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	2204      	movs	r2, #4
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2120      	movs	r1, #32
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 ff3a 	bl	80038bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 febb 	bl	80037c6 <I2C_Flush_TXDR>
 8002a50:	e0ef      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	001a      	movs	r2, r3
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d00f      	beq.n	8002a7e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	001a      	movs	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a68:	d009      	beq.n	8002a7e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4252      	negs	r2, r2
 8002a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a7c:	e0d9      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	09db      	lsrs	r3, r3, #7
 8002a82:	001a      	movs	r2, r3
 8002a84:	2301      	movs	r3, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d060      	beq.n	8002b4c <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	001a      	movs	r2, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a94:	d05a      	beq.n	8002b4c <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2110      	movs	r1, #16
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 ff0e 	bl	80038bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d04a      	beq.n	8002b40 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d910      	bls.n	8002ad6 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	22ff      	movs	r2, #255	; 0xff
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	045b      	lsls	r3, r3, #17
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	2400      	movs	r4, #0
 8002ace:	9400      	str	r4, [sp, #0]
 8002ad0:	f000 feba 	bl	8003848 <I2C_TransferConfig>
 8002ad4:	e011      	b.n	8002afa <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	049b      	lsls	r3, r3, #18
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	2400      	movs	r4, #0
 8002af4:	9400      	str	r4, [sp, #0]
 8002af6:	f000 fea7 	bl	8003848 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2241      	movs	r2, #65	; 0x41
 8002b10:	5c9b      	ldrb	r3, [r3, r2]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b22      	cmp	r3, #34	; 0x22
 8002b16:	d109      	bne.n	8002b2c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0209      	lsls	r1, r1, #8
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b2a:	e082      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	01c9      	lsls	r1, r1, #7
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002b3e:	e078      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 fd13 	bl	8003570 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002b4a:	e072      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	001a      	movs	r2, r3
 8002b52:	2301      	movs	r3, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	d05a      	beq.n	8002c0e <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2301      	movs	r3, #1
 8002b60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002b62:	d054      	beq.n	8002c0e <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2241      	movs	r2, #65	; 0x41
 8002b68:	5c9b      	ldrb	r3, [r3, r2]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b22      	cmp	r3, #34	; 0x22
 8002b6e:	d101      	bne.n	8002b74 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <I2C_Mem_ISR_DMA+0x25c>)
 8002b72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2bff      	cmp	r3, #255	; 0xff
 8002b7c:	d911      	bls.n	8002ba2 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	22ff      	movs	r2, #255	; 0xff
 8002b82:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	045c      	lsls	r4, r3, #17
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	0023      	movs	r3, r4
 8002b9c:	f000 fe54 	bl	8003848 <I2C_TransferConfig>
 8002ba0:	e012      	b.n	8002bc8 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	b299      	uxth	r1, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	049c      	lsls	r4, r3, #18
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	0023      	movs	r3, r4
 8002bc4:	f000 fe40 	bl	8003848 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2241      	movs	r2, #65	; 0x41
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b22      	cmp	r3, #34	; 0x22
 8002be4:	d109      	bne.n	8002bfa <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	0209      	lsls	r1, r1, #8
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bf8:	e01b      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	01c9      	lsls	r1, r1, #7
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c0c:	e011      	b.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	001a      	movs	r2, r3
 8002c14:	2301      	movs	r3, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	d00b      	beq.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	001a      	movs	r2, r3
 8002c20:	2301      	movs	r3, #1
 8002c22:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c24:	d005      	beq.n	8002c32 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	0011      	movs	r1, r2
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 fa4f 	bl	80030d0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b007      	add	sp, #28
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	80002000 	.word	0x80002000
 8002c48:	80002400 	.word	0x80002400

08002c4c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <I2C_Slave_ISR_DMA+0x24>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e0dd      	b.n	8002e2c <I2C_Slave_ISR_DMA+0x1e0>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	001a      	movs	r2, r3
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c8e:	d005      	beq.n	8002c9c <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	0011      	movs	r1, r2
 8002c96:	0018      	movs	r0, r3
 8002c98:	f000 faec 	bl	8003274 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d100      	bne.n	8002caa <I2C_Slave_ISR_DMA+0x5e>
 8002ca8:	e0a9      	b.n	8002dfe <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cb4:	d100      	bne.n	8002cb8 <I2C_Slave_ISR_DMA+0x6c>
 8002cb6:	e0a2      	b.n	8002dfe <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0b9b      	lsrs	r3, r3, #14
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d106      	bne.n	8002cd2 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0bdb      	lsrs	r3, r3, #15
 8002cc8:	001a      	movs	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cce:	d100      	bne.n	8002cd2 <I2C_Slave_ISR_DMA+0x86>
 8002cd0:	e08e      	b.n	8002df0 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0bdb      	lsrs	r3, r3, #15
 8002cde:	001a      	movs	r2, r3
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0b9b      	lsrs	r3, r3, #14
 8002d02:	001a      	movs	r2, r3
 8002d04:	2301      	movs	r3, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	d007      	beq.n	8002d1a <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d12d      	bne.n	8002d7c <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2241      	movs	r2, #65	; 0x41
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b28      	cmp	r3, #40	; 0x28
 8002d2a:	d10b      	bne.n	8002d44 <I2C_Slave_ISR_DMA+0xf8>
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	049b      	lsls	r3, r3, #18
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d106      	bne.n	8002d44 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fbbd 	bl	80034bc <I2C_ITListenCplt>
 8002d42:	e054      	b.n	8002dee <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2241      	movs	r2, #65	; 0x41
 8002d48:	5c9b      	ldrb	r3, [r3, r2]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b29      	cmp	r3, #41	; 0x29
 8002d4e:	d110      	bne.n	8002d72 <I2C_Slave_ISR_DMA+0x126>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <I2C_Slave_ISR_DMA+0x1e8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00c      	beq.n	8002d72 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 fd2f 	bl	80037c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f94a 	bl	8003004 <I2C_ITSlaveSeqCplt>
 8002d70:	e03d      	b.n	8002dee <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002d7a:	e03e      	b.n	8002dfa <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2210      	movs	r2, #16
 8002d82:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	2204      	movs	r2, #4
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002d90:	2317      	movs	r3, #23
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	2141      	movs	r1, #65	; 0x41
 8002d98:	5c52      	ldrb	r2, [r2, r1]
 8002d9a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <I2C_Slave_ISR_DMA+0x160>
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	045b      	lsls	r3, r3, #17
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d126      	bne.n	8002dfa <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dac:	2217      	movs	r2, #23
 8002dae:	18bb      	adds	r3, r7, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b21      	cmp	r3, #33	; 0x21
 8002db4:	d003      	beq.n	8002dbe <I2C_Slave_ISR_DMA+0x172>
 8002db6:	18bb      	adds	r3, r7, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b29      	cmp	r3, #41	; 0x29
 8002dbc:	d103      	bne.n	8002dc6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2221      	movs	r2, #33	; 0x21
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc4:	e00b      	b.n	8002dde <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dc6:	2217      	movs	r2, #23
 8002dc8:	18bb      	adds	r3, r7, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b22      	cmp	r3, #34	; 0x22
 8002dce:	d003      	beq.n	8002dd8 <I2C_Slave_ISR_DMA+0x18c>
 8002dd0:	18bb      	adds	r3, r7, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd6:	d102      	bne.n	8002dde <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2222      	movs	r2, #34	; 0x22
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 fbc2 	bl	8003570 <I2C_ITError>
      if (treatdmanack == 1U)
 8002dec:	e005      	b.n	8002dfa <I2C_Slave_ISR_DMA+0x1ae>
 8002dee:	e004      	b.n	8002dfa <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002df8:	e013      	b.n	8002e22 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002dfa:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dfc:	e011      	b.n	8002e22 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	08db      	lsrs	r3, r3, #3
 8002e02:	001a      	movs	r2, r3
 8002e04:	2301      	movs	r3, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00b      	beq.n	8002e22 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	001a      	movs	r2, r3
 8002e10:	2301      	movs	r3, #1
 8002e12:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e14:	d005      	beq.n	8002e22 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	0011      	movs	r1, r2
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f80b 	bl	8002e38 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b008      	add	sp, #32
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	ffff0000 	.word	0xffff0000

08002e38 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e38:	b5b0      	push	{r4, r5, r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2241      	movs	r2, #65	; 0x41
 8002e46:	5c9b      	ldrb	r3, [r3, r2]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	2328      	movs	r3, #40	; 0x28
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b28      	cmp	r3, #40	; 0x28
 8002e52:	d000      	beq.n	8002e56 <I2C_ITAddrCplt+0x1e>
 8002e54:	e088      	b.n	8002f68 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	250f      	movs	r5, #15
 8002e62:	197b      	adds	r3, r7, r5
 8002e64:	2101      	movs	r1, #1
 8002e66:	400a      	ands	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	200c      	movs	r0, #12
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	21fe      	movs	r1, #254	; 0xfe
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	240a      	movs	r4, #10
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	0592      	lsls	r2, r2, #22
 8002e8c:	0d92      	lsrs	r2, r2, #22
 8002e8e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	2308      	movs	r3, #8
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	21fe      	movs	r1, #254	; 0xfe
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d148      	bne.n	8002f3c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002eaa:	0021      	movs	r1, r4
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	09db      	lsrs	r3, r3, #7
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	183b      	adds	r3, r7, r0
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	4053      	eors	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	2306      	movs	r3, #6
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	187a      	adds	r2, r7, r1
 8002ec8:	8812      	ldrh	r2, [r2, #0]
 8002eca:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d14c      	bne.n	8002f78 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ef4:	183b      	adds	r3, r7, r0
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	197b      	adds	r3, r7, r5
 8002efa:	7819      	ldrb	r1, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff f9da 	bl	80022b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f04:	e038      	b.n	8002f78 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002f06:	240c      	movs	r4, #12
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	18ba      	adds	r2, r7, r2
 8002f0e:	8812      	ldrh	r2, [r2, #0]
 8002f10:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	021a      	lsls	r2, r3, #8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 fd5c 	bl	80039d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2240      	movs	r2, #64	; 0x40
 8002f24:	2100      	movs	r1, #0
 8002f26:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	7819      	ldrb	r1, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7ff f9bf 	bl	80022b8 <HAL_I2C_AddrCallback>
}
 8002f3a:	e01d      	b.n	8002f78 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 fd47 	bl	80039d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f52:	230c      	movs	r3, #12
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	881a      	ldrh	r2, [r3, #0]
 8002f58:	230f      	movs	r3, #15
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	7819      	ldrb	r1, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff f9a9 	bl	80022b8 <HAL_I2C_AddrCallback>
}
 8002f66:	e007      	b.n	8002f78 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b004      	add	sp, #16
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}

08002f80 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2242      	movs	r2, #66	; 0x42
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2241      	movs	r2, #65	; 0x41
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b21      	cmp	r3, #33	; 0x21
 8002f9a:	d117      	bne.n	8002fcc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2241      	movs	r2, #65	; 0x41
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2211      	movs	r2, #17
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fd0f 	bl	80039d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff f957 	bl	8002278 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fca:	e016      	b.n	8002ffa <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2241      	movs	r2, #65	; 0x41
 8002fd0:	2120      	movs	r1, #32
 8002fd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2212      	movs	r2, #18
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fcf7 	bl	80039d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2240      	movs	r2, #64	; 0x40
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff f947 	bl	8002288 <HAL_I2C_MasterRxCpltCallback>
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b002      	add	sp, #8
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2242      	movs	r2, #66	; 0x42
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	0b9b      	lsrs	r3, r3, #14
 8003020:	001a      	movs	r2, r3
 8003022:	2301      	movs	r3, #1
 8003024:	4013      	ands	r3, r2
 8003026:	d008      	beq.n	800303a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4925      	ldr	r1, [pc, #148]	; (80030c8 <I2C_ITSlaveSeqCplt+0xc4>)
 8003034:	400a      	ands	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e00d      	b.n	8003056 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0bdb      	lsrs	r3, r3, #15
 800303e:	001a      	movs	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	4013      	ands	r3, r2
 8003044:	d007      	beq.n	8003056 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	491e      	ldr	r1, [pc, #120]	; (80030cc <I2C_ITSlaveSeqCplt+0xc8>)
 8003052:	400a      	ands	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2241      	movs	r2, #65	; 0x41
 800305a:	5c9b      	ldrb	r3, [r3, r2]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b29      	cmp	r3, #41	; 0x29
 8003060:	d114      	bne.n	800308c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2241      	movs	r2, #65	; 0x41
 8003066:	2128      	movs	r1, #40	; 0x28
 8003068:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2221      	movs	r2, #33	; 0x21
 800306e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2101      	movs	r1, #1
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fcaf 	bl	80039d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2240      	movs	r2, #64	; 0x40
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff f907 	bl	8002298 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800308a:	e019      	b.n	80030c0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2241      	movs	r2, #65	; 0x41
 8003090:	5c9b      	ldrb	r3, [r3, r2]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b2a      	cmp	r3, #42	; 0x2a
 8003096:	d113      	bne.n	80030c0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2241      	movs	r2, #65	; 0x41
 800309c:	2128      	movs	r1, #40	; 0x28
 800309e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2222      	movs	r2, #34	; 0x22
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2102      	movs	r1, #2
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fc94 	bl	80039d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2240      	movs	r2, #64	; 0x40
 80030b4:	2100      	movs	r1, #0
 80030b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7ff f8f4 	bl	80022a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	ffffbfff 	.word	0xffffbfff
 80030cc:	ffff7fff 	.word	0xffff7fff

080030d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2220      	movs	r2, #32
 80030e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2241      	movs	r2, #65	; 0x41
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b21      	cmp	r3, #33	; 0x21
 80030f0:	d108      	bne.n	8003104 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2101      	movs	r1, #1
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 fc6e 	bl	80039d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2211      	movs	r2, #17
 8003100:	631a      	str	r2, [r3, #48]	; 0x30
 8003102:	e00d      	b.n	8003120 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2241      	movs	r2, #65	; 0x41
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b22      	cmp	r3, #34	; 0x22
 800310e:	d107      	bne.n	8003120 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2102      	movs	r1, #2
 8003114:	0018      	movs	r0, r3
 8003116:	f000 fc5f 	bl	80039d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2212      	movs	r2, #18
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4950      	ldr	r1, [pc, #320]	; (800326c <I2C_ITMasterCplt+0x19c>)
 800312c:	400a      	ands	r2, r1
 800312e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4d      	ldr	r2, [pc, #308]	; (8003270 <I2C_ITMasterCplt+0x1a0>)
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	001a      	movs	r2, r3
 8003142:	2301      	movs	r3, #1
 8003144:	4013      	ands	r3, r2
 8003146:	d009      	beq.n	800315c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2210      	movs	r2, #16
 800314e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	2204      	movs	r2, #4
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2241      	movs	r2, #65	; 0x41
 8003160:	5c9b      	ldrb	r3, [r3, r2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b60      	cmp	r3, #96	; 0x60
 8003166:	d10b      	bne.n	8003180 <I2C_ITMasterCplt+0xb0>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	001a      	movs	r2, r3
 800316e:	2301      	movs	r3, #1
 8003170:	4013      	ands	r3, r2
 8003172:	d005      	beq.n	8003180 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2db      	uxtb	r3, r3
 800317c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800317e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 fb1f 	bl	80037c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2241      	movs	r2, #65	; 0x41
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b60      	cmp	r3, #96	; 0x60
 8003198:	d002      	beq.n	80031a0 <I2C_ITMasterCplt+0xd0>
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f9e1 	bl	8003570 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80031ae:	e058      	b.n	8003262 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2241      	movs	r2, #65	; 0x41
 80031b4:	5c9b      	ldrb	r3, [r3, r2]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b21      	cmp	r3, #33	; 0x21
 80031ba:	d126      	bne.n	800320a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2241      	movs	r2, #65	; 0x41
 80031c0:	2120      	movs	r1, #32
 80031c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2242      	movs	r2, #66	; 0x42
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	d10c      	bne.n	80031f0 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2242      	movs	r2, #66	; 0x42
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff f87d 	bl	80022e8 <HAL_I2C_MemTxCpltCallback>
}
 80031ee:	e038      	b.n	8003262 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2242      	movs	r2, #66	; 0x42
 80031f4:	2100      	movs	r1, #0
 80031f6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	2100      	movs	r1, #0
 80031fe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff f838 	bl	8002278 <HAL_I2C_MasterTxCpltCallback>
}
 8003208:	e02b      	b.n	8003262 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2241      	movs	r2, #65	; 0x41
 800320e:	5c9b      	ldrb	r3, [r3, r2]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b22      	cmp	r3, #34	; 0x22
 8003214:	d125      	bne.n	8003262 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2241      	movs	r2, #65	; 0x41
 800321a:	2120      	movs	r1, #32
 800321c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2242      	movs	r2, #66	; 0x42
 8003228:	5c9b      	ldrb	r3, [r3, r2]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10c      	bne.n	800324a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2242      	movs	r2, #66	; 0x42
 8003234:	2100      	movs	r1, #0
 8003236:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	2100      	movs	r1, #0
 800323e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	0018      	movs	r0, r3
 8003244:	f7ff f858 	bl	80022f8 <HAL_I2C_MemRxCpltCallback>
}
 8003248:	e00b      	b.n	8003262 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2242      	movs	r2, #66	; 0x42
 800324e:	2100      	movs	r1, #0
 8003250:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff f813 	bl	8002288 <HAL_I2C_MasterRxCpltCallback>
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b006      	add	sp, #24
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	fe00e800 	.word	0xfe00e800
 8003270:	ffff0000 	.word	0xffff0000

08003274 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800328a:	200f      	movs	r0, #15
 800328c:	183b      	adds	r3, r7, r0
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	2141      	movs	r1, #65	; 0x41
 8003292:	5c52      	ldrb	r2, [r2, r1]
 8003294:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2220      	movs	r2, #32
 800329c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800329e:	183b      	adds	r3, r7, r0
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b21      	cmp	r3, #33	; 0x21
 80032a4:	d003      	beq.n	80032ae <I2C_ITSlaveCplt+0x3a>
 80032a6:	183b      	adds	r3, r7, r0
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b29      	cmp	r3, #41	; 0x29
 80032ac:	d109      	bne.n	80032c2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032ae:	4a7d      	ldr	r2, [pc, #500]	; (80034a4 <I2C_ITSlaveCplt+0x230>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0011      	movs	r1, r2
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 fb8f 	bl	80039d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
 80032c0:	e011      	b.n	80032e6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032c2:	220f      	movs	r2, #15
 80032c4:	18bb      	adds	r3, r7, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b22      	cmp	r3, #34	; 0x22
 80032ca:	d003      	beq.n	80032d4 <I2C_ITSlaveCplt+0x60>
 80032cc:	18bb      	adds	r3, r7, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b2a      	cmp	r3, #42	; 0x2a
 80032d2:	d108      	bne.n	80032e6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032d4:	4a74      	ldr	r2, [pc, #464]	; (80034a8 <I2C_ITSlaveCplt+0x234>)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0011      	movs	r1, r2
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 fb7c 	bl	80039d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2222      	movs	r2, #34	; 0x22
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	0209      	lsls	r1, r1, #8
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	496a      	ldr	r1, [pc, #424]	; (80034ac <I2C_ITSlaveCplt+0x238>)
 8003304:	400a      	ands	r2, r1
 8003306:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fa5b 	bl	80037c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	0b9b      	lsrs	r3, r3, #14
 8003314:	001a      	movs	r2, r3
 8003316:	2301      	movs	r3, #1
 8003318:	4013      	ands	r3, r2
 800331a:	d013      	beq.n	8003344 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4962      	ldr	r1, [pc, #392]	; (80034b0 <I2C_ITSlaveCplt+0x23c>)
 8003328:	400a      	ands	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003342:	e018      	b.n	8003376 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	0bdb      	lsrs	r3, r3, #15
 8003348:	001a      	movs	r2, r3
 800334a:	2301      	movs	r3, #1
 800334c:	4013      	ands	r3, r2
 800334e:	d012      	beq.n	8003376 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4956      	ldr	r1, [pc, #344]	; (80034b4 <I2C_ITSlaveCplt+0x240>)
 800335c:	400a      	ands	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	001a      	movs	r2, r3
 800337c:	2301      	movs	r3, #1
 800337e:	4013      	ands	r3, r2
 8003380:	d020      	beq.n	80033c4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2204      	movs	r2, #4
 8003386:	4393      	bics	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	2204      	movs	r2, #4
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2242      	movs	r2, #66	; 0x42
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f8b9 	bl	8003570 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2241      	movs	r2, #65	; 0x41
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b28      	cmp	r3, #40	; 0x28
 8003408:	d147      	bne.n	800349a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f853 	bl	80034bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003416:	e040      	b.n	800349a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <I2C_ITSlaveCplt+0x244>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d016      	beq.n	8003450 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff fded 	bl	8003004 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <I2C_ITSlaveCplt+0x244>)
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2241      	movs	r2, #65	; 0x41
 8003434:	2120      	movs	r1, #32
 8003436:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f7fe ff45 	bl	80022d8 <HAL_I2C_ListenCpltCallback>
}
 800344e:	e024      	b.n	800349a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2241      	movs	r2, #65	; 0x41
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b22      	cmp	r3, #34	; 0x22
 800345a:	d10f      	bne.n	800347c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2241      	movs	r2, #65	; 0x41
 8003460:	2120      	movs	r1, #32
 8003462:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2240      	movs	r2, #64	; 0x40
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0018      	movs	r0, r3
 8003476:	f7fe ff17 	bl	80022a8 <HAL_I2C_SlaveRxCpltCallback>
}
 800347a:	e00e      	b.n	800349a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2241      	movs	r2, #65	; 0x41
 8003480:	2120      	movs	r1, #32
 8003482:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2240      	movs	r2, #64	; 0x40
 800348e:	2100      	movs	r1, #0
 8003490:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	0018      	movs	r0, r3
 8003496:	f7fe feff 	bl	8002298 <HAL_I2C_SlaveTxCpltCallback>
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	00008001 	.word	0x00008001
 80034a8:	00008002 	.word	0x00008002
 80034ac:	fe00e800 	.word	0xfe00e800
 80034b0:	ffffbfff 	.word	0xffffbfff
 80034b4:	ffff7fff 	.word	0xffff7fff
 80034b8:	ffff0000 	.word	0xffff0000

080034bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a27      	ldr	r2, [pc, #156]	; (8003568 <I2C_ITListenCplt+0xac>)
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2241      	movs	r2, #65	; 0x41
 80034d6:	2120      	movs	r1, #32
 80034d8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2242      	movs	r2, #66	; 0x42
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	001a      	movs	r2, r3
 80034ee:	2301      	movs	r3, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	d022      	beq.n	800353a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	2204      	movs	r2, #4
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <I2C_ITListenCplt+0xb0>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fa49 	bl	80039d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2210      	movs	r2, #16
 800354c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2240      	movs	r2, #64	; 0x40
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f7fe febd 	bl	80022d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b002      	add	sp, #8
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	ffff0000 	.word	0xffff0000
 800356c:	00008003 	.word	0x00008003

08003570 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800357a:	200f      	movs	r0, #15
 800357c:	183b      	adds	r3, r7, r0
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	2141      	movs	r1, #65	; 0x41
 8003582:	5c52      	ldrb	r2, [r2, r1]
 8003584:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2242      	movs	r2, #66	; 0x42
 800358a:	2100      	movs	r1, #0
 800358c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a72      	ldr	r2, [pc, #456]	; (800375c <I2C_ITError+0x1ec>)
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b28      	cmp	r3, #40	; 0x28
 80035ac:	d007      	beq.n	80035be <I2C_ITError+0x4e>
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b29      	cmp	r3, #41	; 0x29
 80035b4:	d003      	beq.n	80035be <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035b6:	183b      	adds	r3, r7, r0
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b2a      	cmp	r3, #42	; 0x2a
 80035bc:	d10c      	bne.n	80035d8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2103      	movs	r1, #3
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 fa08 	bl	80039d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2241      	movs	r2, #65	; 0x41
 80035cc:	2128      	movs	r1, #40	; 0x28
 80035ce:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a63      	ldr	r2, [pc, #396]	; (8003760 <I2C_ITError+0x1f0>)
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34
 80035d6:	e032      	b.n	800363e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035d8:	4a62      	ldr	r2, [pc, #392]	; (8003764 <I2C_ITError+0x1f4>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0011      	movs	r1, r2
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f9fa 	bl	80039d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 f8ed 	bl	80037c6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2241      	movs	r2, #65	; 0x41
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b60      	cmp	r3, #96	; 0x60
 80035f6:	d01f      	beq.n	8003638 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2241      	movs	r2, #65	; 0x41
 80035fc:	2120      	movs	r1, #32
 80035fe:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2220      	movs	r2, #32
 8003608:	4013      	ands	r3, r2
 800360a:	2b20      	cmp	r3, #32
 800360c:	d114      	bne.n	8003638 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2210      	movs	r2, #16
 8003616:	4013      	ands	r3, r2
 8003618:	2b10      	cmp	r3, #16
 800361a:	d109      	bne.n	8003630 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2204      	movs	r2, #4
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2220      	movs	r2, #32
 8003636:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d03b      	beq.n	80036c4 <I2C_ITError+0x154>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b11      	cmp	r3, #17
 8003650:	d002      	beq.n	8003658 <I2C_ITError+0xe8>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b21      	cmp	r3, #33	; 0x21
 8003656:	d135      	bne.n	80036c4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	01db      	lsls	r3, r3, #7
 8003662:	401a      	ands	r2, r3
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	493c      	ldr	r1, [pc, #240]	; (8003768 <I2C_ITError+0x1f8>)
 8003678:	400a      	ands	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	0018      	movs	r0, r3
 8003682:	f7fe fa54 	bl	8001b2e <HAL_DMA_GetState>
 8003686:	0003      	movs	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d016      	beq.n	80036ba <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	4a36      	ldr	r2, [pc, #216]	; (800376c <I2C_ITError+0x1fc>)
 8003692:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	2100      	movs	r1, #0
 800369a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fe f9ff 	bl	8001aa4 <HAL_DMA_Abort_IT>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d051      	beq.n	800374e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	0018      	movs	r0, r3
 80036b6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036b8:	e049      	b.n	800374e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 f859 	bl	8003774 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036c2:	e044      	b.n	800374e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d03b      	beq.n	8003744 <I2C_ITError+0x1d4>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b12      	cmp	r3, #18
 80036d0:	d002      	beq.n	80036d8 <I2C_ITError+0x168>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b22      	cmp	r3, #34	; 0x22
 80036d6:	d135      	bne.n	8003744 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	401a      	ands	r2, r3
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	491e      	ldr	r1, [pc, #120]	; (8003770 <I2C_ITError+0x200>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	0018      	movs	r0, r3
 8003702:	f7fe fa14 	bl	8001b2e <HAL_DMA_GetState>
 8003706:	0003      	movs	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d016      	beq.n	800373a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <I2C_ITError+0x1fc>)
 8003712:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	0018      	movs	r0, r3
 8003722:	f7fe f9bf 	bl	8001aa4 <HAL_DMA_Abort_IT>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d013      	beq.n	8003752 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	0018      	movs	r0, r3
 8003736:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003738:	e00b      	b.n	8003752 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f819 	bl	8003774 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003742:	e006      	b.n	8003752 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f814 	bl	8003774 <I2C_TreatErrorCallback>
  }
}
 800374c:	e002      	b.n	8003754 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	e000      	b.n	8003754 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003752:	46c0      	nop			; (mov r8, r8)
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	b004      	add	sp, #16
 800375a:	bd80      	pop	{r7, pc}
 800375c:	ffff0000 	.word	0xffff0000
 8003760:	080025ad 	.word	0x080025ad
 8003764:	00008003 	.word	0x00008003
 8003768:	ffffbfff 	.word	0xffffbfff
 800376c:	0800380b 	.word	0x0800380b
 8003770:	ffff7fff 	.word	0xffff7fff

08003774 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2241      	movs	r2, #65	; 0x41
 8003780:	5c9b      	ldrb	r3, [r3, r2]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b60      	cmp	r3, #96	; 0x60
 8003786:	d10f      	bne.n	80037a8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2241      	movs	r2, #65	; 0x41
 800378c:	2120      	movs	r1, #32
 800378e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2240      	movs	r2, #64	; 0x40
 800379a:	2100      	movs	r1, #0
 800379c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7fe fdb9 	bl	8002318 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037a6:	e00a      	b.n	80037be <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fe fda5 	bl	8002308 <HAL_I2C_ErrorCallback>
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2202      	movs	r2, #2
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d103      	bne.n	80037e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2200      	movs	r2, #0
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2201      	movs	r2, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d007      	beq.n	8003802 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2101      	movs	r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]
  }
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}

0800380a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	2200      	movs	r2, #0
 8003826:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2200      	movs	r2, #0
 8003836:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	0018      	movs	r0, r3
 800383c:	f7ff ff9a 	bl	8003774 <I2C_TreatErrorCallback>
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	0008      	movs	r0, r1
 8003852:	0011      	movs	r1, r2
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	240a      	movs	r4, #10
 8003858:	193b      	adds	r3, r7, r4
 800385a:	1c02      	adds	r2, r0, #0
 800385c:	801a      	strh	r2, [r3, #0]
 800385e:	2009      	movs	r0, #9
 8003860:	183b      	adds	r3, r7, r0
 8003862:	1c0a      	adds	r2, r1, #0
 8003864:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003866:	193b      	adds	r3, r7, r4
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	059b      	lsls	r3, r3, #22
 800386c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800386e:	183b      	adds	r3, r7, r0
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	0419      	lsls	r1, r3, #16
 8003874:	23ff      	movs	r3, #255	; 0xff
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	4313      	orrs	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003892:	0d51      	lsrs	r1, r2, #21
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	00d2      	lsls	r2, r2, #3
 8003898:	400a      	ands	r2, r1
 800389a:	4907      	ldr	r1, [pc, #28]	; (80038b8 <I2C_TransferConfig+0x70>)
 800389c:	430a      	orrs	r2, r1
 800389e:	43d2      	mvns	r2, r2
 80038a0:	401a      	ands	r2, r3
 80038a2:	0011      	movs	r1, r2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b007      	add	sp, #28
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	03ff63ff 	.word	0x03ff63ff

080038bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	000a      	movs	r2, r1
 80038c6:	1cbb      	adds	r3, r7, #2
 80038c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <I2C_Enable_IRQ+0x110>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d035      	beq.n	8003944 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80038dc:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <I2C_Enable_IRQ+0x114>)
 80038de:	429a      	cmp	r2, r3
 80038e0:	d030      	beq.n	8003944 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <I2C_Enable_IRQ+0x118>)
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d02b      	beq.n	8003944 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038ec:	1cbb      	adds	r3, r7, #2
 80038ee:	2200      	movs	r2, #0
 80038f0:	5e9b      	ldrsh	r3, [r3, r2]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da03      	bge.n	80038fe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	22b8      	movs	r2, #184	; 0xb8
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	4013      	ands	r3, r2
 8003906:	d003      	beq.n	8003910 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	22f2      	movs	r2, #242	; 0xf2
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003910:	1cbb      	adds	r3, r7, #2
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	2202      	movs	r2, #2
 8003916:	4013      	ands	r3, r2
 8003918:	d003      	beq.n	8003922 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22f4      	movs	r2, #244	; 0xf4
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003922:	1cbb      	adds	r3, r7, #2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	2b10      	cmp	r3, #16
 8003928:	d103      	bne.n	8003932 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2290      	movs	r2, #144	; 0x90
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003932:	1cbb      	adds	r3, r7, #2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b20      	cmp	r3, #32
 8003938:	d13c      	bne.n	80039b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003942:	e037      	b.n	80039b4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003944:	1cbb      	adds	r3, r7, #2
 8003946:	2200      	movs	r2, #0
 8003948:	5e9b      	ldrsh	r3, [r3, r2]
 800394a:	2b00      	cmp	r3, #0
 800394c:	da03      	bge.n	8003956 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	22b8      	movs	r2, #184	; 0xb8
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003956:	1cbb      	adds	r3, r7, #2
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	d003      	beq.n	8003968 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	22f2      	movs	r2, #242	; 0xf2
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003968:	1cbb      	adds	r3, r7, #2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	2202      	movs	r2, #2
 800396e:	4013      	ands	r3, r2
 8003970:	d003      	beq.n	800397a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	22f4      	movs	r2, #244	; 0xf4
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800397a:	1cbb      	adds	r3, r7, #2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d103      	bne.n	800398a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2290      	movs	r2, #144	; 0x90
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800398a:	1cbb      	adds	r3, r7, #2
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	2b20      	cmp	r3, #32
 8003990:	d103      	bne.n	800399a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2260      	movs	r2, #96	; 0x60
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <I2C_Enable_IRQ+0x118>)
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d007      	beq.n	80039b4 <I2C_Enable_IRQ+0xf8>
 80039a4:	1cbb      	adds	r3, r7, #2
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d103      	bne.n	80039b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b004      	add	sp, #16
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	080027d5 	.word	0x080027d5
 80039d0:	08002c4d 	.word	0x08002c4d
 80039d4:	080029ed 	.word	0x080029ed

080039d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	000a      	movs	r2, r1
 80039e2:	1cbb      	adds	r3, r7, #2
 80039e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039ea:	1cbb      	adds	r3, r7, #2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d010      	beq.n	8003a16 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2242      	movs	r2, #66	; 0x42
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2241      	movs	r2, #65	; 0x41
 8003a00:	5c9b      	ldrb	r3, [r3, r2]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	001a      	movs	r2, r3
 8003a06:	2328      	movs	r3, #40	; 0x28
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b28      	cmp	r3, #40	; 0x28
 8003a0c:	d003      	beq.n	8003a16 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	22b0      	movs	r2, #176	; 0xb0
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a16:	1cbb      	adds	r3, r7, #2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d010      	beq.n	8003a42 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2244      	movs	r2, #68	; 0x44
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2241      	movs	r2, #65	; 0x41
 8003a2c:	5c9b      	ldrb	r3, [r3, r2]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	001a      	movs	r2, r3
 8003a32:	2328      	movs	r3, #40	; 0x28
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b28      	cmp	r3, #40	; 0x28
 8003a38:	d003      	beq.n	8003a42 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22b0      	movs	r2, #176	; 0xb0
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	2200      	movs	r2, #0
 8003a46:	5e9b      	ldrsh	r3, [r3, r2]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	da03      	bge.n	8003a54 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	22b8      	movs	r2, #184	; 0xb8
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a54:	1cbb      	adds	r3, r7, #2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d103      	bne.n	8003a64 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2290      	movs	r2, #144	; 0x90
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a64:	1cbb      	adds	r3, r7, #2
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d103      	bne.n	8003a74 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a74:	1cbb      	adds	r3, r7, #2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d103      	bne.n	8003a84 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	43d9      	mvns	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	400a      	ands	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2241      	movs	r2, #65	; 0x41
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d138      	bne.n	8003b28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2240      	movs	r2, #64	; 0x40
 8003aba:	5c9b      	ldrb	r3, [r3, r2]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e032      	b.n	8003b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	2101      	movs	r1, #1
 8003aca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2241      	movs	r2, #65	; 0x41
 8003ad0:	2124      	movs	r1, #36	; 0x24
 8003ad2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4911      	ldr	r1, [pc, #68]	; (8003b34 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6819      	ldr	r1, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2101      	movs	r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2241      	movs	r2, #65	; 0x41
 8003b18:	2120      	movs	r1, #32
 8003b1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2240      	movs	r2, #64	; 0x40
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b002      	add	sp, #8
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	ffffefff 	.word	0xffffefff

08003b38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2241      	movs	r2, #65	; 0x41
 8003b46:	5c9b      	ldrb	r3, [r3, r2]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d139      	bne.n	8003bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2240      	movs	r2, #64	; 0x40
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e033      	b.n	8003bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	2101      	movs	r1, #1
 8003b62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2241      	movs	r2, #65	; 0x41
 8003b68:	2124      	movs	r1, #36	; 0x24
 8003b6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2101      	movs	r1, #1
 8003b78:	438a      	bics	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2241      	movs	r2, #65	; 0x41
 8003bb2:	2120      	movs	r1, #32
 8003bb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2240      	movs	r2, #64	; 0x40
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	fffff0ff 	.word	0xfffff0ff

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e301      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4013      	ands	r3, r2
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x1e>
 8003bec:	e08d      	b.n	8003d0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bee:	4bc3      	ldr	r3, [pc, #780]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	220c      	movs	r2, #12
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00e      	beq.n	8003c18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bfa:	4bc0      	ldr	r3, [pc, #768]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	220c      	movs	r2, #12
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x64>
 8003c06:	4bbd      	ldr	r3, [pc, #756]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	2380      	movs	r3, #128	; 0x80
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	401a      	ands	r2, r3
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	025b      	lsls	r3, r3, #9
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4bb8      	ldr	r3, [pc, #736]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	4013      	ands	r3, r2
 8003c22:	d100      	bne.n	8003c26 <HAL_RCC_OscConfig+0x56>
 8003c24:	e070      	b.n	8003d08 <HAL_RCC_OscConfig+0x138>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d000      	beq.n	8003c30 <HAL_RCC_OscConfig+0x60>
 8003c2e:	e06b      	b.n	8003d08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e2d8      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x7c>
 8003c3c:	4baf      	ldr	r3, [pc, #700]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4bae      	ldr	r3, [pc, #696]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	0249      	lsls	r1, r1, #9
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e02f      	b.n	8003cac <HAL_RCC_OscConfig+0xdc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10c      	bne.n	8003c6e <HAL_RCC_OscConfig+0x9e>
 8003c54:	4ba9      	ldr	r3, [pc, #676]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4ba8      	ldr	r3, [pc, #672]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	49a9      	ldr	r1, [pc, #676]	; (8003f00 <HAL_RCC_OscConfig+0x330>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	4ba6      	ldr	r3, [pc, #664]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4ba5      	ldr	r3, [pc, #660]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c66:	49a7      	ldr	r1, [pc, #668]	; (8003f04 <HAL_RCC_OscConfig+0x334>)
 8003c68:	400a      	ands	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e01e      	b.n	8003cac <HAL_RCC_OscConfig+0xdc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d10e      	bne.n	8003c94 <HAL_RCC_OscConfig+0xc4>
 8003c76:	4ba1      	ldr	r3, [pc, #644]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4ba0      	ldr	r3, [pc, #640]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	02c9      	lsls	r1, r1, #11
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	4b9d      	ldr	r3, [pc, #628]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b9c      	ldr	r3, [pc, #624]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	0249      	lsls	r1, r1, #9
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xdc>
 8003c94:	4b99      	ldr	r3, [pc, #612]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b98      	ldr	r3, [pc, #608]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	4999      	ldr	r1, [pc, #612]	; (8003f00 <HAL_RCC_OscConfig+0x330>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4b96      	ldr	r3, [pc, #600]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b95      	ldr	r3, [pc, #596]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	4997      	ldr	r1, [pc, #604]	; (8003f04 <HAL_RCC_OscConfig+0x334>)
 8003ca8:	400a      	ands	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d014      	beq.n	8003cde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fe0e 	bl	80018d4 <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbe:	f7fd fe09 	bl	80018d4 <HAL_GetTick>
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b64      	cmp	r3, #100	; 0x64
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e28a      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd0:	4b8a      	ldr	r3, [pc, #552]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	029b      	lsls	r3, r3, #10
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0xee>
 8003cdc:	e015      	b.n	8003d0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fd fdf9 	bl	80018d4 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fdf4 	bl	80018d4 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e275      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b80      	ldr	r3, [pc, #512]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	4013      	ands	r3, r2
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x118>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4013      	ands	r3, r2
 8003d12:	d100      	bne.n	8003d16 <HAL_RCC_OscConfig+0x146>
 8003d14:	e069      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d16:	4b79      	ldr	r3, [pc, #484]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d00b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d20:	4b76      	ldr	r3, [pc, #472]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	220c      	movs	r2, #12
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11c      	bne.n	8003d66 <HAL_RCC_OscConfig+0x196>
 8003d2c:	4b73      	ldr	r3, [pc, #460]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	025b      	lsls	r3, r3, #9
 8003d34:	4013      	ands	r3, r2
 8003d36:	d116      	bne.n	8003d66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d38:	4b70      	ldr	r3, [pc, #448]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e24b      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b6b      	ldr	r3, [pc, #428]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	22f8      	movs	r2, #248	; 0xf8
 8003d54:	4393      	bics	r3, r2
 8003d56:	0019      	movs	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00da      	lsls	r2, r3, #3
 8003d5e:	4b67      	ldr	r3, [pc, #412]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d64:	e041      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d024      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b62      	ldr	r3, [pc, #392]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d74:	2101      	movs	r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fd fdab 	bl	80018d4 <HAL_GetTick>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fd fda6 	bl	80018d4 <HAL_GetTick>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e227      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d0f1      	beq.n	8003d84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b56      	ldr	r3, [pc, #344]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	22f8      	movs	r2, #248	; 0xf8
 8003da6:	4393      	bics	r3, r2
 8003da8:	0019      	movs	r1, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	4b52      	ldr	r3, [pc, #328]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e018      	b.n	8003dea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db8:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fd86 	bl	80018d4 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fd fd81 	bl	80018d4 <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e202      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de0:	4b46      	ldr	r3, [pc, #280]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2202      	movs	r2, #2
 8003de6:	4013      	ands	r3, r2
 8003de8:	d1f1      	bne.n	8003dce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2208      	movs	r2, #8
 8003df0:	4013      	ands	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d019      	beq.n	8003e30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfc:	4b3f      	ldr	r3, [pc, #252]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e00:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	430a      	orrs	r2, r1
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e08:	f7fd fd64 	bl	80018d4 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fd fd5f 	bl	80018d4 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1e0      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e24:	4b35      	ldr	r3, [pc, #212]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d0f1      	beq.n	8003e12 <HAL_RCC_OscConfig+0x242>
 8003e2e:	e018      	b.n	8003e62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e30:	4b32      	ldr	r3, [pc, #200]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e34:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e36:	2101      	movs	r1, #1
 8003e38:	438a      	bics	r2, r1
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fd fd4a 	bl	80018d4 <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fd fd45 	bl	80018d4 <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1c6      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d1f1      	bne.n	8003e46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2204      	movs	r2, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <HAL_RCC_OscConfig+0x29e>
 8003e6c:	e0b4      	b.n	8003fd8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	201f      	movs	r0, #31
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	055b      	lsls	r3, r3, #21
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d110      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	0549      	lsls	r1, r1, #21
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	61da      	str	r2, [r3, #28]
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	055b      	lsls	r3, r3, #21
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4013      	ands	r3, r2
 8003eae:	d11a      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	0049      	lsls	r1, r1, #1
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7fd fd09 	bl	80018d4 <HAL_GetTick>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fd fd04 	bl	80018d4 <HAL_GetTick>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e185      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x338>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10e      	bne.n	8003f0c <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	6a1a      	ldr	r2, [r3, #32]
 8003ef2:	4b02      	ldr	r3, [pc, #8]	; (8003efc <HAL_RCC_OscConfig+0x32c>)
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	621a      	str	r2, [r3, #32]
 8003efa:	e035      	b.n	8003f68 <HAL_RCC_OscConfig+0x398>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	fffeffff 	.word	0xfffeffff
 8003f04:	fffbffff 	.word	0xfffbffff
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <HAL_RCC_OscConfig+0x35e>
 8003f14:	4bb6      	ldr	r3, [pc, #728]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	4bb5      	ldr	r3, [pc, #724]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	621a      	str	r2, [r3, #32]
 8003f20:	4bb3      	ldr	r3, [pc, #716]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	4bb2      	ldr	r3, [pc, #712]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f26:	2104      	movs	r1, #4
 8003f28:	438a      	bics	r2, r1
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e01c      	b.n	8003f68 <HAL_RCC_OscConfig+0x398>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x380>
 8003f36:	4bae      	ldr	r3, [pc, #696]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	4bad      	ldr	r3, [pc, #692]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	621a      	str	r2, [r3, #32]
 8003f42:	4bab      	ldr	r3, [pc, #684]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	4baa      	ldr	r3, [pc, #680]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	621a      	str	r2, [r3, #32]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0x398>
 8003f50:	4ba7      	ldr	r3, [pc, #668]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	4ba6      	ldr	r3, [pc, #664]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	438a      	bics	r2, r1
 8003f5a:	621a      	str	r2, [r3, #32]
 8003f5c:	4ba4      	ldr	r3, [pc, #656]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	4ba3      	ldr	r3, [pc, #652]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f62:	2104      	movs	r1, #4
 8003f64:	438a      	bics	r2, r1
 8003f66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d014      	beq.n	8003f9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f70:	f7fd fcb0 	bl	80018d4 <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f78:	e009      	b.n	8003f8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7a:	f7fd fcab 	bl	80018d4 <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	4a9b      	ldr	r2, [pc, #620]	; (80041f4 <HAL_RCC_OscConfig+0x624>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e12b      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	4b98      	ldr	r3, [pc, #608]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	2202      	movs	r2, #2
 8003f94:	4013      	ands	r3, r2
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x3aa>
 8003f98:	e013      	b.n	8003fc2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fd fc9b 	bl	80018d4 <HAL_GetTick>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fd fc96 	bl	80018d4 <HAL_GetTick>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a91      	ldr	r2, [pc, #580]	; (80041f4 <HAL_RCC_OscConfig+0x624>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e116      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb8:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fc2:	231f      	movs	r3, #31
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4b88      	ldr	r3, [pc, #544]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	4b87      	ldr	r3, [pc, #540]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fd2:	4989      	ldr	r1, [pc, #548]	; (80041f8 <HAL_RCC_OscConfig+0x628>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d063      	beq.n	80040aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12a      	bne.n	8004040 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fea:	4b81      	ldr	r3, [pc, #516]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fee:	4b80      	ldr	r3, [pc, #512]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	430a      	orrs	r2, r1
 8004000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fd fc67 	bl	80018d4 <HAL_GetTick>
 8004006:	0003      	movs	r3, r0
 8004008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800400c:	f7fd fc62 	bl	80018d4 <HAL_GetTick>
 8004010:	0002      	movs	r2, r0
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0e3      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800401e:	4b74      	ldr	r3, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	2202      	movs	r2, #2
 8004024:	4013      	ands	r3, r2
 8004026:	d0f1      	beq.n	800400c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	22f8      	movs	r2, #248	; 0xf8
 800402e:	4393      	bics	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	00da      	lsls	r2, r3, #3
 8004038:	4b6d      	ldr	r3, [pc, #436]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800403a:	430a      	orrs	r2, r1
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
 800403e:	e034      	b.n	80040aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	3305      	adds	r3, #5
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004048:	4b69      	ldr	r3, [pc, #420]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800404a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404c:	4b68      	ldr	r3, [pc, #416]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800404e:	2104      	movs	r1, #4
 8004050:	438a      	bics	r2, r1
 8004052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004054:	4b66      	ldr	r3, [pc, #408]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	22f8      	movs	r2, #248	; 0xf8
 800405a:	4393      	bics	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	00da      	lsls	r2, r3, #3
 8004064:	4b62      	ldr	r3, [pc, #392]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004066:	430a      	orrs	r2, r1
 8004068:	635a      	str	r2, [r3, #52]	; 0x34
 800406a:	e01e      	b.n	80040aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800406c:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800406e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004070:	4b5f      	ldr	r3, [pc, #380]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004072:	2104      	movs	r1, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004078:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800407a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407c:	4b5c      	ldr	r3, [pc, #368]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800407e:	2101      	movs	r1, #1
 8004080:	438a      	bics	r2, r1
 8004082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004084:	f7fd fc26 	bl	80018d4 <HAL_GetTick>
 8004088:	0003      	movs	r3, r0
 800408a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800408e:	f7fd fc21 	bl	80018d4 <HAL_GetTick>
 8004092:	0002      	movs	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0a2      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	2202      	movs	r2, #2
 80040a6:	4013      	ands	r3, r2
 80040a8:	d1f1      	bne.n	800408e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d100      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4e4>
 80040b2:	e097      	b.n	80041e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	220c      	movs	r2, #12
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d100      	bne.n	80040c2 <HAL_RCC_OscConfig+0x4f2>
 80040c0:	e06b      	b.n	800419a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d14c      	bne.n	8004164 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040d0:	494a      	ldr	r1, [pc, #296]	; (80041fc <HAL_RCC_OscConfig+0x62c>)
 80040d2:	400a      	ands	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fd fbfd 	bl	80018d4 <HAL_GetTick>
 80040da:	0003      	movs	r3, r0
 80040dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd fbf8 	bl	80018d4 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e079      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f2:	4b3f      	ldr	r3, [pc, #252]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	049b      	lsls	r3, r3, #18
 80040fa:	4013      	ands	r3, r2
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fe:	4b3c      	ldr	r3, [pc, #240]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	220f      	movs	r2, #15
 8004104:	4393      	bics	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4b38      	ldr	r3, [pc, #224]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800410e:	430a      	orrs	r2, r1
 8004110:	62da      	str	r2, [r3, #44]	; 0x2c
 8004112:	4b37      	ldr	r3, [pc, #220]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4a3a      	ldr	r2, [pc, #232]	; (8004200 <HAL_RCC_OscConfig+0x630>)
 8004118:	4013      	ands	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	431a      	orrs	r2, r3
 8004126:	4b32      	ldr	r3, [pc, #200]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800412c:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0449      	lsls	r1, r1, #17
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fd fbcb 	bl	80018d4 <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd fbc6 	bl	80018d4 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e047      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004156:	4b26      	ldr	r3, [pc, #152]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	049b      	lsls	r3, r3, #18
 800415e:	4013      	ands	r3, r2
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x574>
 8004162:	e03f      	b.n	80041e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b21      	ldr	r3, [pc, #132]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800416a:	4924      	ldr	r1, [pc, #144]	; (80041fc <HAL_RCC_OscConfig+0x62c>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd fbb0 	bl	80018d4 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417a:	f7fd fbab 	bl	80018d4 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e02c      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	049b      	lsls	r3, r3, #18
 8004194:	4013      	ands	r3, r2
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x5aa>
 8004198:	e024      	b.n	80041e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01f      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_RCC_OscConfig+0x620>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	025b      	lsls	r3, r3, #9
 80041b8:	401a      	ands	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	220f      	movs	r2, #15
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	23f0      	movs	r3, #240	; 0xf0
 80041d4:	039b      	lsls	r3, r3, #14
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b008      	add	sp, #32
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	40021000 	.word	0x40021000
 80041f4:	00001388 	.word	0x00001388
 80041f8:	efffffff 	.word	0xefffffff
 80041fc:	feffffff 	.word	0xfeffffff
 8004200:	ffc2ffff 	.word	0xffc2ffff

08004204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0b3      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004218:	4b5b      	ldr	r3, [pc, #364]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d911      	bls.n	800424a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004226:	4b58      	ldr	r3, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	4393      	bics	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2201      	movs	r2, #1
 800423e:	4013      	ands	r3, r2
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d001      	beq.n	800424a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e09a      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2202      	movs	r2, #2
 8004250:	4013      	ands	r3, r2
 8004252:	d015      	beq.n	8004280 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2204      	movs	r2, #4
 800425a:	4013      	ands	r3, r2
 800425c:	d006      	beq.n	800426c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800425e:	4b4b      	ldr	r3, [pc, #300]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4b4a      	ldr	r3, [pc, #296]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 8004264:	21e0      	movs	r1, #224	; 0xe0
 8004266:	00c9      	lsls	r1, r1, #3
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b47      	ldr	r3, [pc, #284]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	22f0      	movs	r2, #240	; 0xf0
 8004272:	4393      	bics	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	4b44      	ldr	r3, [pc, #272]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2201      	movs	r2, #1
 8004286:	4013      	ands	r3, r2
 8004288:	d040      	beq.n	800430c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b3e      	ldr	r3, [pc, #248]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	029b      	lsls	r3, r3, #10
 800429a:	4013      	ands	r3, r2
 800429c:	d114      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06e      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b38      	ldr	r3, [pc, #224]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	049b      	lsls	r3, r3, #18
 80042b2:	4013      	ands	r3, r2
 80042b4:	d108      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e062      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b34      	ldr	r3, [pc, #208]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2202      	movs	r2, #2
 80042c0:	4013      	ands	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e05b      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c8:	4b30      	ldr	r3, [pc, #192]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2203      	movs	r2, #3
 80042ce:	4393      	bics	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fd fafa 	bl	80018d4 <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e4:	e009      	b.n	80042fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e6:	f7fd faf5 	bl	80018d4 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	4a27      	ldr	r2, [pc, #156]	; (8004390 <HAL_RCC_ClockConfig+0x18c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e042      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	220c      	movs	r2, #12
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1ec      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2201      	movs	r2, #1
 8004312:	4013      	ands	r3, r2
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d211      	bcs.n	800433e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	4393      	bics	r3, r2
 8004322:	0019      	movs	r1, r3
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432c:	4b16      	ldr	r3, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x184>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2201      	movs	r2, #1
 8004332:	4013      	ands	r3, r2
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e020      	b.n	8004380 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	d009      	beq.n	800435c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a11      	ldr	r2, [pc, #68]	; (8004394 <HAL_RCC_ClockConfig+0x190>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800435c:	f000 f82e 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 8004360:	0001      	movs	r1, r0
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x188>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	220f      	movs	r2, #15
 800436a:	4013      	ands	r3, r2
 800436c:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x194>)
 800436e:	5cd3      	ldrb	r3, [r2, r3]
 8004370:	000a      	movs	r2, r1
 8004372:	40da      	lsrs	r2, r3
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x198>)
 8004376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004378:	2003      	movs	r0, #3
 800437a:	f7fd fa65 	bl	8001848 <HAL_InitTick>
  
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40022000 	.word	0x40022000
 800438c:	40021000 	.word	0x40021000
 8004390:	00001388 	.word	0x00001388
 8004394:	fffff8ff 	.word	0xfffff8ff
 8004398:	08004bb8 	.word	0x08004bb8
 800439c:	20000008 	.word	0x20000008

080043a0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <HAL_RCC_EnableCSS+0x18>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_RCC_EnableCSS+0x18>)
 80043aa:	2180      	movs	r1, #128	; 0x80
 80043ac:	0309      	lsls	r1, r1, #12
 80043ae:	430a      	orrs	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	220c      	movs	r2, #12
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x30>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x36>
 80043ea:	e02c      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_GetSysClockFreq+0xa0>)
 80043ee:	613b      	str	r3, [r7, #16]
      break;
 80043f0:	e02c      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	220f      	movs	r2, #15
 80043f8:	4013      	ands	r3, r2
 80043fa:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043fc:	5cd3      	ldrb	r3, [r2, r3]
 80043fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004400:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	220f      	movs	r2, #15
 8004406:	4013      	ands	r3, r2
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_RCC_GetSysClockFreq+0xa8>)
 800440a:	5cd3      	ldrb	r3, [r2, r3]
 800440c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	2380      	movs	r3, #128	; 0x80
 8004412:	025b      	lsls	r3, r3, #9
 8004414:	4013      	ands	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4810      	ldr	r0, [pc, #64]	; (800445c <HAL_RCC_GetSysClockFreq+0xa0>)
 800441c:	f7fb fe74 	bl	8000108 <__udivsi3>
 8004420:	0003      	movs	r3, r0
 8004422:	001a      	movs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4353      	muls	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e009      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	000a      	movs	r2, r1
 8004430:	0152      	lsls	r2, r2, #5
 8004432:	1a52      	subs	r2, r2, r1
 8004434:	0193      	lsls	r3, r2, #6
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	185b      	adds	r3, r3, r1
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	613b      	str	r3, [r7, #16]
      break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004448:	613b      	str	r3, [r7, #16]
      break;
 800444a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	0018      	movs	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	b006      	add	sp, #24
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40021000 	.word	0x40021000
 800445c:	007a1200 	.word	0x007a1200
 8004460:	08004bc8 	.word	0x08004bc8
 8004464:	08004bd8 	.word	0x08004bd8

08004468 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCC_NMI_IRQHandler+0x20>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	4013      	ands	r3, r2
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d104      	bne.n	8004482 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004478:	f000 f80a 	bl	8004490 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_RCC_NMI_IRQHandler+0x24>)
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	701a      	strb	r2, [r3, #0]
  }
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000
 800448c:	4002100a 	.word	0x4002100a

08004490 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	4013      	ands	r3, r2
 80044b6:	d100      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80044b8:	e08e      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80044ba:	2017      	movs	r0, #23
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	2380      	movs	r3, #128	; 0x80
 80044c8:	055b      	lsls	r3, r3, #21
 80044ca:	4013      	ands	r3, r2
 80044cc:	d110      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b54      	ldr	r3, [pc, #336]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	0549      	lsls	r1, r1, #21
 80044d8:	430a      	orrs	r2, r1
 80044da:	61da      	str	r2, [r3, #28]
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	055b      	lsls	r3, r3, #21
 80044e4:	4013      	ands	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	183b      	adds	r3, r7, r0
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d11a      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fc:	4b49      	ldr	r3, [pc, #292]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b48      	ldr	r3, [pc, #288]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004502:	2180      	movs	r1, #128	; 0x80
 8004504:	0049      	lsls	r1, r1, #1
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450a:	f7fd f9e3 	bl	80018d4 <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fd f9de 	bl	80018d4 <HAL_GetTick>
 8004518:	0002      	movs	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e077      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4013      	ands	r3, r2
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004534:	6a1a      	ldr	r2, [r3, #32]
 8004536:	23c0      	movs	r3, #192	; 0xc0
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d034      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4013      	ands	r3, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	429a      	cmp	r2, r3
 8004552:	d02c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004554:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a33      	ldr	r2, [pc, #204]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004560:	6a1a      	ldr	r2, [r3, #32]
 8004562:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004564:	2180      	movs	r1, #128	; 0x80
 8004566:	0249      	lsls	r1, r1, #9
 8004568:	430a      	orrs	r2, r1
 800456a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800456e:	6a1a      	ldr	r2, [r3, #32]
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004572:	492e      	ldr	r1, [pc, #184]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004574:	400a      	ands	r2, r1
 8004576:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fd f9a5 	bl	80018d4 <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	e009      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fd f9a0 	bl	80018d4 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e038      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a4:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	2202      	movs	r2, #2
 80045aa:	4013      	ands	r3, r2
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80045b4:	4013      	ands	r3, r2
 80045b6:	0019      	movs	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045be:	430a      	orrs	r2, r1
 80045c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045c2:	2317      	movs	r3, #23
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ce:	69da      	ldr	r2, [r3, #28]
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045d2:	4918      	ldr	r1, [pc, #96]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	2203      	movs	r2, #3
 80045e8:	4393      	bics	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2220      	movs	r2, #32
 80045fc:	4013      	ands	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004600:	4b07      	ldr	r3, [pc, #28]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2210      	movs	r2, #16
 8004606:	4393      	bics	r3, r2
 8004608:	0019      	movs	r1, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004610:	430a      	orrs	r2, r1
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b006      	add	sp, #24
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	fffffcff 	.word	0xfffffcff
 800462c:	fffeffff 	.word	0xfffeffff
 8004630:	00001388 	.word	0x00001388
 8004634:	efffffff 	.word	0xefffffff

08004638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e042      	b.n	80046d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223d      	movs	r2, #61	; 0x3d
 800464e:	5c9b      	ldrb	r3, [r3, r2]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223c      	movs	r2, #60	; 0x3c
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	0018      	movs	r0, r3
 8004662:	f7fd f847 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	223d      	movs	r2, #61	; 0x3d
 800466a:	2102      	movs	r1, #2
 800466c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	0019      	movs	r1, r3
 8004678:	0010      	movs	r0, r2
 800467a:	f000 f9a9 	bl	80049d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2246      	movs	r2, #70	; 0x46
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	223e      	movs	r2, #62	; 0x3e
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	223f      	movs	r2, #63	; 0x3f
 8004692:	2101      	movs	r1, #1
 8004694:	5499      	strb	r1, [r3, r2]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2240      	movs	r2, #64	; 0x40
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2241      	movs	r2, #65	; 0x41
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2242      	movs	r2, #66	; 0x42
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2243      	movs	r2, #67	; 0x43
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2244      	movs	r2, #68	; 0x44
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2245      	movs	r2, #69	; 0x45
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	223d      	movs	r2, #61	; 0x3d
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	0018      	movs	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b002      	add	sp, #8
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	223d      	movs	r2, #61	; 0x3d
 80046e4:	5c9b      	ldrb	r3, [r3, r2]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e030      	b.n	8004752 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	223d      	movs	r2, #61	; 0x3d
 80046f4:	2102      	movs	r1, #2
 80046f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2101      	movs	r1, #1
 8004704:	430a      	orrs	r2, r1
 8004706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <HAL_TIM_Base_Start_IT+0x84>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x44>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <HAL_TIM_Base_Start_IT+0x88>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d111      	bne.n	8004740 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2207      	movs	r2, #7
 8004724:	4013      	ands	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d010      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2101      	movs	r1, #1
 800473a:	430a      	orrs	r2, r1
 800473c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473e:	e007      	b.n	8004750 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400

08004764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2202      	movs	r2, #2
 8004774:	4013      	ands	r3, r2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d124      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2202      	movs	r2, #2
 8004782:	4013      	ands	r3, r2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d11d      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2203      	movs	r2, #3
 800478e:	4252      	negs	r2, r2
 8004790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2203      	movs	r2, #3
 80047a0:	4013      	ands	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	0018      	movs	r0, r3
 80047a8:	f000 f8fa 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80047ac:	e007      	b.n	80047be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f8ed 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 f8f9 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2204      	movs	r2, #4
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d125      	bne.n	800481e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2204      	movs	r2, #4
 80047da:	4013      	ands	r3, r2
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d11e      	bne.n	800481e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2205      	movs	r2, #5
 80047e6:	4252      	negs	r2, r2
 80047e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2202      	movs	r2, #2
 80047ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	23c0      	movs	r3, #192	; 0xc0
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4013      	ands	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f8cd 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004806:	e007      	b.n	8004818 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0018      	movs	r0, r3
 800480c:	f000 f8c0 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f8cc 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2208      	movs	r2, #8
 8004826:	4013      	ands	r3, r2
 8004828:	2b08      	cmp	r3, #8
 800482a:	d124      	bne.n	8004876 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2208      	movs	r2, #8
 8004834:	4013      	ands	r3, r2
 8004836:	2b08      	cmp	r3, #8
 8004838:	d11d      	bne.n	8004876 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2209      	movs	r2, #9
 8004840:	4252      	negs	r2, r2
 8004842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2204      	movs	r2, #4
 8004848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	2203      	movs	r2, #3
 8004852:	4013      	ands	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 f8a1 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 800485e:	e007      	b.n	8004870 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f894 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f8a0 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2210      	movs	r2, #16
 800487e:	4013      	ands	r3, r2
 8004880:	2b10      	cmp	r3, #16
 8004882:	d125      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	2210      	movs	r2, #16
 800488c:	4013      	ands	r3, r2
 800488e:	2b10      	cmp	r3, #16
 8004890:	d11e      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2211      	movs	r2, #17
 8004898:	4252      	negs	r2, r2
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2208      	movs	r2, #8
 80048a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	23c0      	movs	r3, #192	; 0xc0
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4013      	ands	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 f874 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e007      	b.n	80048ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 f867 	bl	8004990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 f873 	bl	80049b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10f      	bne.n	80048fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d108      	bne.n	80048fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2202      	movs	r2, #2
 80048f2:	4252      	negs	r2, r2
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fc fc6d 	bl	80011d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	4013      	ands	r3, r2
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d10f      	bne.n	800492c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	4013      	ands	r3, r2
 8004916:	2b80      	cmp	r3, #128	; 0x80
 8004918:	d108      	bne.n	800492c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2281      	movs	r2, #129	; 0x81
 8004920:	4252      	negs	r2, r2
 8004922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 f8c6 	bl	8004ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	4013      	ands	r3, r2
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d10f      	bne.n	800495a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2240      	movs	r2, #64	; 0x40
 8004942:	4013      	ands	r3, r2
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	d108      	bne.n	800495a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2241      	movs	r2, #65	; 0x41
 800494e:	4252      	negs	r2, r2
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f833 	bl	80049c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2220      	movs	r2, #32
 8004962:	4013      	ands	r3, r2
 8004964:	2b20      	cmp	r3, #32
 8004966:	d10f      	bne.n	8004988 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	4013      	ands	r3, r2
 8004972:	2b20      	cmp	r3, #32
 8004974:	d108      	bne.n	8004988 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	4252      	negs	r2, r2
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0018      	movs	r0, r3
 8004984:	f000 f890 	bl	8004aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a2b      	ldr	r2, [pc, #172]	; (8004a90 <TIM_Base_SetConfig+0xc0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0x20>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <TIM_Base_SetConfig+0xc4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2270      	movs	r2, #112	; 0x70
 80049f4:	4393      	bics	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a22      	ldr	r2, [pc, #136]	; (8004a90 <TIM_Base_SetConfig+0xc0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0x5a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <TIM_Base_SetConfig+0xc4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x5a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_Base_SetConfig+0xc8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x5a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <TIM_Base_SetConfig+0xcc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x5a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <TIM_Base_SetConfig+0xd0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <TIM_Base_SetConfig+0xd4>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	4393      	bics	r3, r2
 8004a42:	001a      	movs	r2, r3
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <TIM_Base_SetConfig+0xc0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d007      	beq.n	8004a7a <TIM_Base_SetConfig+0xaa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <TIM_Base_SetConfig+0xcc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_Base_SetConfig+0xaa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <TIM_Base_SetConfig+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d103      	bne.n	8004a82 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	615a      	str	r2, [r3, #20]
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b004      	add	sp, #16
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40002000 	.word	0x40002000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	fffffcff 	.word	0xfffffcff

08004aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	2600      	movs	r6, #0
 8004acc:	4d0c      	ldr	r5, [pc, #48]	; (8004b00 <__libc_init_array+0x38>)
 8004ace:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	42a6      	cmp	r6, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	2600      	movs	r6, #0
 8004ada:	f000 f821 	bl	8004b20 <_init>
 8004ade:	4d0a      	ldr	r5, [pc, #40]	; (8004b08 <__libc_init_array+0x40>)
 8004ae0:	4c0a      	ldr	r4, [pc, #40]	; (8004b0c <__libc_init_array+0x44>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	42a6      	cmp	r6, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	00b3      	lsls	r3, r6, #2
 8004aee:	58eb      	ldr	r3, [r5, r3]
 8004af0:	4798      	blx	r3
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	00b3      	lsls	r3, r6, #2
 8004af8:	58eb      	ldr	r3, [r5, r3]
 8004afa:	4798      	blx	r3
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	08004be8 	.word	0x08004be8
 8004b04:	08004be8 	.word	0x08004be8
 8004b08:	08004be8 	.word	0x08004be8
 8004b0c:	08004bec 	.word	0x08004bec

08004b10 <memset>:
 8004b10:	0003      	movs	r3, r0
 8004b12:	1882      	adds	r2, r0, r2
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	7019      	strb	r1, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
